"use strict";
/**
 * Audit Logger
 *
 * Logs audit events for security and compliance.
 *
 * @version 1.0.0
 */
/**
 * Audit Logger
 *
 * Logs audit events for security and compliance.
 */
class AuditLogger {
    /**
     * Create a new AuditLogger instance
     * @param {Object} options - Configuration options
     */
    constructor(options = {}) {
        // Configuration
        this.config = {
            // Debug mode
            debugMode: false,
            // Database instance
            database: null,
            // Audit log collection name
            auditLogCollection: '_audit_logs',
            // Max document size (bytes)
            maxDocumentSize: 1024 * 1024, // 1 MB
            // Merge with provided options
            ...options,
        };
        // State
        this.currentUser = null;
        // Initialize
        this._init();
    }
    /**
     * Initialize the logger
     * @private
     */
    _init() {
        this.log('Initializing Audit Logger');
        // Set up audit log collection if database is provided
        if (this.config.database) {
            this._setupAuditLogCollection();
        }
        this.log('Audit Logger initialized');
    }
    /**
     * Set up audit log collection
     * @private
     */
    _setupAuditLogCollection() {
        if (!this.config.database) {
            return;
        }
        // Get or create audit log collection
        const auditLogCollection = this.config.database.getCollection(this.config.auditLogCollection) ||
            this.config.database.createCollection(this.config.auditLogCollection);
        this.log(`Audit log collection set up: ${this.config.auditLogCollection}`);
    }
    /**
     * Set database reference
     * @param {UnifiedQuantumDatabase} database - Database instance
     * @returns {AuditLogger} This instance for chaining
     */
    setDatabase(database) {
        this.config.database = database;
        this._setupAuditLogCollection();
        this.log('Database reference set');
        return this;
    }
    /**
     * Set current user
     * @param {Object} user - User
     * @returns {AuditLogger} This instance for chaining
     */
    setCurrentUser(user) {
        this.currentUser = user;
        this.log(`Current user set: ${user ? user.username : 'null'}`);
        return this;
    }
    /**
     * Log an event
     * @param {Object} event - Event
     * @returns {Promise<Object>} Logged event
     */
    async logEvent(event) {
        try {
            if (!this.config.database) {
                this.log('Database not set, skipping audit log');
                return null;
            }
            // Get audit log collection
            const auditLogCollection = this.config.database.getCollection(this.config.auditLogCollection);
            if (!auditLogCollection) {
                this.log(`Audit log collection not found: ${this.config.auditLogCollection}`);
                return null;
            }
            // Create audit log entry
            const auditLog = {
                id: `audit-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
                timestamp: event.timestamp || Date.now(),
                collection: event.collection,
                action: event.action,
                documentId: event.documentId,
                user: event.user ||
                    (this.currentUser
                        ? {
                            id: this.currentUser.id,
                            username: this.currentUser.username,
                        }
                        : null),
                metadata: event.metadata || {},
                createdAt: Date.now(),
            };
            // Add document if provided
            if (event.document) {
                // Limit document size
                const documentString = JSON.stringify(event.document);
                if (documentString.length <= this.config.maxDocumentSize) {
                    auditLog.document = event.document;
                }
                else {
                    auditLog.document = {
                        _truncated: true,
                        _size: documentString.length,
                    };
                    auditLog.metadata.documentTruncated = true;
                }
            }
            // Insert audit log
            auditLogCollection.insert(auditLog);
            this.log(`Logged audit event: ${auditLog.action} on ${auditLog.collection}`);
            return auditLog;
        }
        catch (error) {
            this.log(`Error logging audit event: ${error.message}`);
            return null;
        }
    }
    /**
     * Search audit logs
     * @param {Object} criteria - Search criteria
     * @param {Object} options - Search options
     * @returns {Promise<Array>} Audit logs
     */
    async searchLogs(criteria = {}, options = {}) {
        try {
            if (!this.config.database) {
                return [];
            }
            // Get audit log collection
            const auditLogCollection = this.config.database.getCollection(this.config.auditLogCollection);
            if (!auditLogCollection) {
                return [];
            }
            // Find audit logs
            const auditLogs = auditLogCollection.find(criteria, options);
            return auditLogs;
        }
        catch (error) {
            this.log(`Error searching audit logs: ${error.message}`);
            return [];
        }
    }
    /**
     * Get audit logs for a document
     * @param {string} collectionName - Collection name
     * @param {string} documentId - Document ID
     * @param {Object} options - Search options
     * @returns {Promise<Array>} Audit logs
     */
    async getDocumentLogs(collectionName, documentId, options = {}) {
        return this.searchLogs({
            collection: collectionName,
            documentId,
        }, {
            sort: { timestamp: -1 },
            ...options,
        });
    }
    /**
     * Get audit logs for a user
     * @param {string} userId - User ID
     * @param {Object} options - Search options
     * @returns {Promise<Array>} Audit logs
     */
    async getUserLogs(userId, options = {}) {
        return this.searchLogs({
            'user.id': userId,
        }, {
            sort: { timestamp: -1 },
            ...options,
        });
    }
    /**
     * Get audit logs for a collection
     * @param {string} collectionName - Collection name
     * @param {Object} options - Search options
     * @returns {Promise<Array>} Audit logs
     */
    async getCollectionLogs(collectionName, options = {}) {
        return this.searchLogs({
            collection: collectionName,
        }, {
            sort: { timestamp: -1 },
            ...options,
        });
    }
    /**
     * Get audit logs for an action
     * @param {string} action - Action
     * @param {Object} options - Search options
     * @returns {Promise<Array>} Audit logs
     */
    async getActionLogs(action, options = {}) {
        return this.searchLogs({
            action,
        }, {
            sort: { timestamp: -1 },
            ...options,
        });
    }
    /**
     * Get audit logs for a time range
     * @param {number} startTime - Start time
     * @param {number} endTime - End time
     * @param {Object} options - Search options
     * @returns {Promise<Array>} Audit logs
     */
    async getTimeRangeLogs(startTime, endTime, options = {}) {
        return this.searchLogs({
            timestamp: {
                $gte: startTime,
                $lte: endTime,
            },
        }, {
            sort: { timestamp: -1 },
            ...options,
        });
    }
    /**
     * Log message if debug mode is enabled
     * @param {string} message - Message to log
     * @private
     */
    log(message) {
        if (this.config.debugMode) {
            console.log(`[AuditLogger] ${message}`);
        }
    }
}
module.exports = { AuditLogger };
