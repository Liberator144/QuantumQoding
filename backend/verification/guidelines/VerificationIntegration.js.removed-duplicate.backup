"use strict";
/**
 * VerificationIntegration
 *
 * Integrates guideline verification with the verification system.
 *
 * @version 1.0.0
 */
const { EventEmitter } = require('events');
const GuidelineChecker = require('./GuidelineChecker');
const GuidelineChecklist = require('./GuidelineChecklist');
/**
 * VerificationIntegration
 *
 * Integrates guideline verification with the verification system.
 */
class VerificationIntegration extends EventEmitter {
    /**
     * Create a new VerificationIntegration instance
     * @param {Object} options - Configuration options
     */
    constructor(options = {}) {
        super();
        // Configuration
        this.config = {
            // Debug mode
            debugMode: false,
            // Verification system
            verificationSystem: null,
            // Merge with provided options
            ...options,
        };
        // Initialize
        this._init();
    }
    /**
     * Initialize the verification integration
     * @private
     */
    _init() {
        this.log('Initializing VerificationIntegration');
        try {
            // Load verification system if provided
            if (this.config.verificationSystem) {
                this.verificationSystem = this.config.verificationSystem;
                // Add guideline verification methods to verification system
                this._extendVerificationSystem();
            }
            else {
                this.log('No verification system provided');
            }
            this.log('VerificationIntegration initialized');
        }
        catch (error) {
            this.log(`Initialization error: ${error.message}`);
            this.emit('error', error);
        }
    }
    /**
     * Extend verification system with guideline verification methods
     * @private
     */
    _extendVerificationSystem() {
        try {
            // Add verifyGuidelineCompliance method
            this.verificationSystem.verifyGuidelineCompliance = async (targetPath, options = {}) => {
                return await this.verifyGuidelineCompliance(targetPath, options);
            };
            // Add verifyWithChecklist method
            this.verificationSystem.verifyWithChecklist = async (targetPath, checklistPath = null) => {
                return await this.verifyWithChecklist(targetPath, checklistPath);
            };
            // Add generateChecklist method
            this.verificationSystem.generateChecklist = async (targetPath, options = {}) => {
                return await this.generateChecklist(targetPath, options);
            };
            this.log('Verification system extended with guideline verification methods');
        }
        catch (error) {
            this.log(`Extend verification system error: ${error.message}`);
            throw error;
        }
    }
    /**
     * Verify guideline compliance
     * @param {string} targetPath - Path to target
     * @param {Object} options - Options
     * @returns {Object} Verification result
     */
    verifyGuidelineCompliance(targetPath, options = {}) {
        try {
            this.log(`Verifying guideline compliance for: ${targetPath}`);
            // Create guideline checker
            const guidelineChecker = new GuidelineChecker(options);
            // Verify guidelines
            const verificationResult = guidelineChecker.check(targetPath);
            this.log(`Guideline compliance verification completed for: ${targetPath}`);
            this.emit('guideline-verification-completed', { targetPath });
            return verificationResult;
        }
        catch (error) {
            this.log(`Verify guideline compliance error: ${error.message}`);
            this.emit('error', error);
            return {
                success: false,
                error: error.message,
            };
        }
    }
    /**
     * Verify with checklist
     * @param {string} targetPath - Path to target
     * @param {string} checklistPath - Path to checklist
     * @returns {Object} Verification result
     */
    verifyWithChecklist(targetPath, checklistPath = null) {
        try {
            this.log(`Verifying with checklist for: ${targetPath}`);
            // Create guideline checklist
            const guidelineChecklist = new GuidelineChecklist(this.config);
            if (!checklistPath) {
                // Generate a new checklist
                const generateResult = guidelineChecklist.generateChecklist(targetPath);
                if (!generateResult.success) {
                    throw new Error(`Failed to generate checklist: ${generateResult.error}`);
                }
                checklistPath = generateResult.outputPath;
                this.log(`Generated checklist: ${checklistPath}`);
            }
            // Validate checklist
            const validationResult = guidelineChecklist.validateChecklist(checklistPath);
            if (!validationResult.success) {
                throw new Error(`Failed to validate checklist: ${validationResult.error}`);
            }
            // Generate report
            const reportResult = guidelineChecklist.generateReport(checklistPath, targetPath);
            this.log(`Checklist verification completed for: ${targetPath}`);
            this.emit('checklist-verification-completed', { targetPath, checklistPath });
            return {
                success: true,
                targetPath,
                checklistPath,
                reportPath: reportResult.outputPath,
                report: reportResult.report,
            };
        }
        catch (error) {
            this.log(`Verify with checklist error: ${error.message}`);
            this.emit('error', error);
            return {
                success: false,
                error: error.message,
            };
        }
    }
    /**
     * Generate checklist
     * @param {string} targetPath - Path to target
     * @param {Object} options - Options
     * @returns {Object} Generation result
     */
    generateChecklist(targetPath, options = {}) {
        try {
            this.log(`Generating checklist for: ${targetPath}`);
            // Create guideline checklist
            const guidelineChecklist = new GuidelineChecklist(this.config);
            // Generate checklist
            const generateResult = guidelineChecklist.generateChecklist(targetPath, options);
            this.log(`Checklist generation completed for: ${targetPath}`);
            this.emit('checklist-generation-completed', {
                targetPath,
                outputPath: generateResult.outputPath,
            });
            return generateResult;
        }
        catch (error) {
            this.log(`Generate checklist error: ${error.message}`);
            this.emit('error', error);
            return {
                success: false,
                error: error.message,
            };
        }
    }
    /**
     * Log message if debug mode is enabled
     * @param {string} message - Message to log
     * @private
     */
    log(message) {
        if (this.config.debugMode) {
            console.log(`[VerificationIntegration] ${message}`);
        }
    }
}
module.exports = VerificationIntegration;
