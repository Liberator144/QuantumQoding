/**
 * Interdimensional Communication Framework
 *
 * Provides a unified interface for interdimensional communication, integrating
 * consciousness streams, quantum state management, neural fabric, and boundary
 * management.
 *
 * @version 1.0.0
 */
import { v4 as uuidv4 } from 'uuid';
import { NeuralNodeType, NeuralConnectionType } from './neural/NeuralFabricManager';
import { BoundaryType, BoundaryState, BoundaryPermission } from './boundary/BoundaryManager';
import { VerificationLevel } from './verification/InterdimensionalVerifier';
export class InterdimensionalCommunicationFramework {
    /**
     * Constructor
     * @param options - Interdimensional communication framework options
     */
    constructor(options = {}) {
        /** Communication channels */
        this.channels = new Map();
        this.consciousnessStreamManager = options.consciousnessStreamManager;
        this.quantumStateManager = options.quantumStateManager;
        this.neuralFabricManager = options.neuralFabricManager;
        this.boundaryManager = options.boundaryManager;
        this.interdimensionalVerifier = options.interdimensionalVerifier;
        this.defaultVerificationLevel = options.defaultVerificationLevel || VerificationLevel.STANDARD;
        this.debugMode = options.debugMode || false;
        // Log initialization
        this.log('Interdimensional communication framework initialized');
    }
    /**
     * Create a communication channel
     * @param sourceDimensionId - Source dimension ID
     * @param targetDimensionId - Target dimension ID
     * @param name - Channel name
     * @returns Created channel
     */
    createChannel(sourceDimensionId, targetDimensionId, name) {
        // Check if dimensions exist
        if (this.boundaryManager) {
            const sourceDimension = this.boundaryManager.getDimension(sourceDimensionId);
            const targetDimension = this.boundaryManager.getDimension(targetDimensionId);
            if (!sourceDimension) {
                throw new Error(`Source dimension ${sourceDimensionId} does not exist`);
            }
            if (!targetDimension) {
                throw new Error(`Target dimension ${targetDimensionId} does not exist`);
            }
        }
        // Create boundary if needed
        let boundaryId = '';
        if (this.boundaryManager) {
            const boundaries = this.boundaryManager.getBoundariesBetweenDimensions(sourceDimensionId, targetDimensionId);
            if (boundaries.length > 0) {
                boundaryId = boundaries[0].id;
            }
            else {
                const boundary = this.boundaryManager.createBoundary({
                    sourceDimensionId,
                    targetDimensionId,
                    type: BoundaryType.PERMEABLE,
                    state: BoundaryState.OPEN,
                    permissions: [
                        BoundaryPermission.ALLOW_CONSCIOUSNESS,
                        BoundaryPermission.ALLOW_QUANTUM,
                        BoundaryPermission.ALLOW_DATA
                    ],
                    name: `Boundary-${sourceDimensionId}-${targetDimensionId}`,
                });
                boundaryId = boundary.id;
            }
        }
        // Create neural fabric connection if needed
        let neuralFabricConnectionId = '';
        if (this.neuralFabricManager) {
            // Create source and target nodes
            const sourceNode = this.neuralFabricManager.addNode({
                type: NeuralNodeType.CUSTOM,
                name: `Dimension-${sourceDimensionId}`,
                metadata: {
                    dimensionId: sourceDimensionId,
                },
            });
            const targetNode = this.neuralFabricManager.addNode({
                type: NeuralNodeType.CUSTOM,
                name: `Dimension-${targetDimensionId}`,
                metadata: {
                    dimensionId: targetDimensionId,
                },
            });
            // Create connection
            const connection = this.neuralFabricManager.connectNodes(sourceNode.id, targetNode.id, NeuralConnectionType.CUSTOM, {
                strength: 1.0,
                bidirectional: true,
                metadata: {
                    sourceDimensionId,
                    targetDimensionId,
                },
            });
            neuralFabricConnectionId = connection.id;
        }
        // Create consciousness stream
        const consciousnessStreamId = uuidv4();
        // Create channel
        const channel = {
            id: uuidv4(),
            name: name || `Channel-${sourceDimensionId}-${targetDimensionId}`,
            sourceDimensionId,
            targetDimensionId,
            boundaryId,
            neuralFabricConnectionId,
            consciousnessStreamId,
            state: 'active',
            metadata: {
                createdAt: Date.now(),
            },
        };
        this.channels.set(channel.id, channel);
        // Log channel creation
        this.log(`Created channel: ${channel.id} (${channel.name})`);
        return channel;
    }
    /**
     * Get a channel
     * @param channelId - Channel ID
     * @returns Channel
     */
    getChannel(channelId) {
        return this.channels.get(channelId);
    }
    /**
     * Get all channels
     * @returns All channels
     */
    getAllChannels() {
        return Array.from(this.channels.values());
    }
    /**
     * Get channels between dimensions
     * @param sourceDimensionId - Source dimension ID
     * @param targetDimensionId - Target dimension ID
     * @returns Channels between dimensions
     */
    getChannelsBetweenDimensions(sourceDimensionId, targetDimensionId) {
        return Array.from(this.channels.values()).filter(channel => channel.sourceDimensionId === sourceDimensionId &&
            channel.targetDimensionId === targetDimensionId);
    }
    /**
     * Send a message through a channel
     * @param channelId - Channel ID
     * @param message - Message
     * @param options - Send options
     * @returns Communication result
     */
    sendMessage(channelId, message, options = {}) {
        try {
            const channel = this.channels.get(channelId);
            if (!channel) {
                throw new Error(`Channel ${channelId} does not exist`);
            }
            if (channel.state !== 'active') {
                throw new Error(`Channel ${channelId} is not active`);
            }
            // Create message ID
            const messageId = uuidv4();
            // Create consciousness stream packet
            const packet = {
                header: {
                    streamId: channel.consciousnessStreamId,
                    packetId: messageId,
                    timestamp: Date.now(),
                    sourceId: channel.sourceDimensionId,
                    targetId: channel.targetDimensionId,
                    contextPreservationFlags: {
                        preserveQuantumState: options.preserveQuantumState || false,
                        preserveContext: options.preserveContext || false,
                    },
                },
                payload: {
                    data: message,
                },
            };
            // Add neural fabric connection if available
            if (channel.neuralFabricConnectionId && this.neuralFabricManager) {
                const fabric = this.neuralFabricManager.getFabric();
                const connection = fabric.connections.find(c => c.id === channel.neuralFabricConnectionId);
                if (connection) {
                    packet.header.neuralFabricConnection = {
                        id: connection.id,
                        sourceNodeId: connection.sourceNodeId,
                        targetNodeId: connection.targetNodeId,
                        strength: connection.strength,
                        type: 'consciousness-stream',
                        metadata: {
                            channelId: channel.id,
                            messageId,
                        },
                    };
                }
            }
            // Add quantum state if requested
            if (options.preserveQuantumState && this.quantumStateManager) {
                const quantumState = {
                    id: `quantum-state-${messageId}`,
                    version: 1,
                    properties: {
                        messageId,
                        channelId: channel.id,
                        timestamp: Date.now(),
                    },
                    propertyTimestamps: {
                        messageId: Date.now(),
                        channelId: Date.now(),
                        timestamp: Date.now(),
                    },
                };
                packet.payload.quantumState = quantumState;
            }
            // Verify packet if verifier is available
            let verificationResult;
            if (this.interdimensionalVerifier) {
                verificationResult = this.interdimensionalVerifier.verifyConsciousnessStream(packet, options.verificationLevel || this.defaultVerificationLevel);
                if (!verificationResult.success) {
                    return {
                        success: false,
                        channelId,
                        messageId,
                        verification: verificationResult,
                        error: 'Verification failed',
                        errorCode: 'VERIFICATION_FAILED',
                    };
                }
            }
            // Cross boundary if boundary manager is available
            if (this.boundaryManager && channel.boundaryId) {
                const crossing = this.boundaryManager.crossBoundaryWithConsciousness(channel.boundaryId, packet);
                if (crossing.result !== 'success') {
                    return {
                        success: false,
                        channelId,
                        messageId,
                        verification: verificationResult,
                        error: crossing.error || 'Boundary crossing failed',
                        errorCode: 'BOUNDARY_CROSSING_FAILED',
                    };
                }
            }
            // Log message sending
            this.log(`Sent message: ${messageId} through channel ${channelId}`);
            return {
                success: true,
                channelId,
                messageId,
                verification: verificationResult,
            };
        }
        catch (error) {
            return {
                success: false,
                channelId,
                messageId: uuidv4(),
                error: error instanceof Error ? error.message : String(error),
                errorCode: 'UNKNOWN_ERROR',
            };
        }
    }
    /**
     * Synchronize quantum states between dimensions
     * @param sourceStateId - Source state ID
     * @param targetStateId - Target state ID
     * @param channelId - Channel ID
     * @returns Communication result
     */
    synchronizeQuantumStates(sourceStateId, targetStateId, channelId) {
        try {
            const channel = this.channels.get(channelId);
            if (!channel) {
                throw new Error(`Channel ${channelId} does not exist`);
            }
            if (channel.state !== 'active') {
                throw new Error(`Channel ${channelId} is not active`);
            }
            // Create message ID
            const messageId = uuidv4();
            // Synchronize quantum states if quantum state manager is available
            if (this.quantumStateManager) {
                // Get source and target states
                const sourceState = this.quantumStateManager.getStateVector(sourceStateId);
                const targetState = this.quantumStateManager.getStateVector(targetStateId);
                if (!sourceState) {
                    throw new Error(`Source quantum state ${sourceStateId} does not exist`);
                }
                if (!targetState) {
                    throw new Error(`Target quantum state ${targetStateId} does not exist`);
                }
                // Synchronize states
                this.quantumStateManager.synchronizeStates({ id: sourceStateId, version: 1, properties: {}, lastSynchronized: Date.now() }, { id: targetStateId, version: 1, properties: {}, lastSynchronized: Date.now() });
            }
            // Cross boundary if boundary manager is available
            if (this.boundaryManager && channel.boundaryId) {
                const crossing = this.boundaryManager.crossBoundaryWithQuantumState(channel.boundaryId, { id: sourceStateId, version: 1, properties: {}, lastSynchronized: Date.now() });
                if (crossing.result !== 'success') {
                    return {
                        success: false,
                        channelId,
                        messageId,
                        error: crossing.error || 'Boundary crossing failed',
                        errorCode: 'BOUNDARY_CROSSING_FAILED',
                    };
                }
            }
            // Synchronize through neural fabric if available
            if (this.neuralFabricManager && channel.neuralFabricConnectionId) {
                this.neuralFabricManager.synchronizeQuantumStates(sourceStateId, targetStateId);
            }
            // Log quantum state synchronization
            this.log(`Synchronized quantum states: ${sourceStateId} -> ${targetStateId} through channel ${channelId}`);
            return {
                success: true,
                channelId,
                messageId,
            };
        }
        catch (error) {
            return {
                success: false,
                channelId,
                messageId: uuidv4(),
                error: error instanceof Error ? error.message : String(error),
                errorCode: 'UNKNOWN_ERROR',
            };
        }
    }
    /**
     * Verify interdimensional communication
     * @param channelId - Channel ID
     * @param level - Verification level
     * @returns Verification result
     */
    verifyChannel(channelId, level = this.defaultVerificationLevel) {
        if (!this.interdimensionalVerifier) {
            return undefined;
        }
        const channel = this.channels.get(channelId);
        if (!channel) {
            throw new Error(`Channel ${channelId} does not exist`);
        }
        // Verify boundary if available
        if (this.boundaryManager && channel.boundaryId) {
            const boundary = this.boundaryManager.getBoundary(channel.boundaryId);
            if (boundary) {
                return this.interdimensionalVerifier.verifyBoundary(boundary, level);
            }
        }
        // Verify neural fabric if available
        if (this.neuralFabricManager && channel.neuralFabricConnectionId) {
            const fabric = this.neuralFabricManager.getFabric();
            return this.interdimensionalVerifier.verifyNeuralFabric(fabric, level);
        }
        // Perform comprehensive verification
        return this.interdimensionalVerifier.verifyComprehensive(level);
    }
    /**
     * Close a channel
     * @param channelId - Channel ID
     * @returns Success flag
     */
    closeChannel(channelId) {
        const channel = this.channels.get(channelId);
        if (!channel) {
            return false;
        }
        // Update channel state
        channel.state = 'inactive';
        // Update boundary state if available
        if (this.boundaryManager && channel.boundaryId) {
            try {
                this.boundaryManager.updateBoundaryState(channel.boundaryId, BoundaryState.CLOSED);
            }
            catch (error) {
                this.log(`Error closing boundary: ${error instanceof Error ? error.message : String(error)}`);
            }
        }
        // Log channel closing
        this.log(`Closed channel: ${channelId}`);
        return true;
    }
    /**
     * Log a message if debug mode is enabled
     * @param message - Message to log
     */
    log(message) {
        if (this.debugMode) {
            console.log(`[InterdimensionalCommunicationFramework] ${message}`);
        }
    }
}
export default InterdimensionalCommunicationFramework;
