/**
 * ID Utilities
 *
 * This module provides utility functions for generating unique IDs.
 *
 * @version 1.0.0
 */
import { v4 as uuidv4 } from 'uuid';
/**
 * Generate a simple ID using timestamp and random string
 * @returns A unique ID string
 */
export function generateSimpleId() {
    return `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
}
/**
 * Generate a UUID v4
 * @returns A UUID v4 string
 */
export function generateUuid() {
    return uuidv4();
}
/**
 * Generate a short ID (useful for display purposes)
 * @param length - Length of the ID (default: 8)
 * @returns A short random ID
 */
export function generateShortId(length = 8) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}
/**
 * Generate a sequential ID with a prefix
 * @param prefix - ID prefix
 * @param counter - Current counter value
 * @returns A sequential ID
 */
export function generateSequentialId(prefix, counter) {
    return `${prefix}-${counter.toString().padStart(6, '0')}`;
}
/**
 * Generate a timestamp-based ID with custom format
 * @param format - Format string (default: 'yyyyMMddHHmmss')
 * @returns A timestamp-based ID
 */
export function generateTimestampId(format = 'yyyyMMddHHmmss') {
    const now = new Date();
    // Replace format tokens with date components
    return format
        .replace('yyyy', now.getFullYear().toString())
        .replace('MM', (now.getMonth() + 1).toString().padStart(2, '0'))
        .replace('dd', now.getDate().toString().padStart(2, '0'))
        .replace('HH', now.getHours().toString().padStart(2, '0'))
        .replace('mm', now.getMinutes().toString().padStart(2, '0'))
        .replace('ss', now.getSeconds().toString().padStart(2, '0'))
        .replace('SSS', now.getMilliseconds().toString().padStart(3, '0'));
}
