/**
 * Sample templates for the code generation system
 */
import { v4 as uuidv4 } from 'uuid';
import { ProgrammingLanguage, TemplateCategory, VariableType, } from './types';
/**
 * Add sample templates to a repository
 */
export async function addSampleTemplates(repository) {
    // Add JavaScript/TypeScript templates
    await addJavaScriptTemplates(repository);
    // Add Python templates
    await addPythonTemplates(repository);
    // Add HTML/CSS templates
    await addWebTemplates(repository);
}
/**
 * Add JavaScript/TypeScript templates
 */
async function addJavaScriptTemplates(repository) {
    // Class template
    const classTemplate = {
        id: uuidv4(),
        name: 'TypeScript Class',
        description: 'A TypeScript class with constructor and methods',
        language: ProgrammingLanguage.TYPESCRIPT,
        category: TemplateCategory.CLASS,
        content: `/**
 * ${className} class
 * ${classDescription}
 */
export class ${className} {
  ${properties}
  
  /**
   * Constructor
   */
  constructor(${constructorParams}) {
    ${constructorBody}
  }
  
  /**
   * ${methodName} method
   * ${methodDescription}
   */
  ${methodName}(${methodParams}): ${returnType} {
    ${methodBody}
  }
}`,
        variables: [
            {
                name: 'className',
                type: VariableType.IDENTIFIER,
                description: 'The name of the class',
                required: true,
                defaultValue: 'MyClass',
            },
            {
                name: 'classDescription',
                type: VariableType.STRING,
                description: 'A description of the class',
                required: false,
                defaultValue: 'A class that does something',
            },
            {
                name: 'properties',
                type: VariableType.BLOCK,
                description: 'The class properties',
                required: false,
                defaultValue: '/** The name property */\nprivate name: string;\n\n/** The value property */\nprivate value: number;',
            },
            {
                name: 'constructorParams',
                type: VariableType.PARAMETER,
                description: 'The constructor parameters',
                required: false,
                defaultValue: 'name: string, value: number = 0',
            },
            {
                name: 'constructorBody',
                type: VariableType.BLOCK,
                description: 'The constructor body',
                required: false,
                defaultValue: 'this.name = name;\nthis.value = value;',
            },
            {
                name: 'methodName',
                type: VariableType.IDENTIFIER,
                description: 'The name of the method',
                required: false,
                defaultValue: 'getValue',
            },
            {
                name: 'methodDescription',
                type: VariableType.STRING,
                description: 'A description of the method',
                required: false,
                defaultValue: 'Gets the current value',
            },
            {
                name: 'methodParams',
                type: VariableType.PARAMETER,
                description: 'The method parameters',
                required: false,
                defaultValue: 'multiplier: number = 1',
            },
            {
                name: 'returnType',
                type: VariableType.TYPE,
                description: 'The return type of the method',
                required: false,
                defaultValue: 'number',
            },
            {
                name: 'methodBody',
                type: VariableType.BLOCK,
                description: 'The method body',
                required: false,
                defaultValue: 'return this.value * multiplier;',
            },
        ],
        tags: ['typescript', 'class', 'oop'],
        version: '1.0.0',
        author: 'Quantum Qoding',
        createdAt: new Date(),
        updatedAt: new Date(),
        usageCount: 0,
        rating: 5,
    };
    // Function template
    const functionTemplate = {
        id: uuidv4(),
        name: 'TypeScript Function',
        description: 'A TypeScript function with parameters and return type',
        language: ProgrammingLanguage.TYPESCRIPT,
        category: TemplateCategory.FUNCTION,
        content: `/**
 * ${functionName} function
 * ${functionDescription}
 * 
 * @param ${paramName} - ${paramDescription}
 * @returns ${returnDescription}
 */
export function ${functionName}(${functionParams}): ${returnType} {
  ${functionBody}
}`,
        variables: [
            {
                name: 'functionName',
                type: VariableType.IDENTIFIER,
                description: 'The name of the function',
                required: true,
                defaultValue: 'processData',
            },
            {
                name: 'functionDescription',
                type: VariableType.STRING,
                description: 'A description of the function',
                required: false,
                defaultValue: 'Processes the input data and returns a result',
            },
            {
                name: 'paramName',
                type: VariableType.IDENTIFIER,
                description: 'The name of the parameter',
                required: false,
                defaultValue: 'data',
            },
            {
                name: 'paramDescription',
                type: VariableType.STRING,
                description: 'A description of the parameter',
                required: false,
                defaultValue: 'The data to process',
            },
            {
                name: 'returnDescription',
                type: VariableType.STRING,
                description: 'A description of the return value',
                required: false,
                defaultValue: 'The processed result',
            },
            {
                name: 'functionParams',
                type: VariableType.PARAMETER,
                description: 'The function parameters',
                required: false,
                defaultValue: 'data: any, options?: { debug?: boolean }',
            },
            {
                name: 'returnType',
                type: VariableType.TYPE,
                description: 'The return type of the function',
                required: false,
                defaultValue: 'any',
            },
            {
                name: 'functionBody',
                type: VariableType.BLOCK,
                description: 'The function body',
                required: false,
                defaultValue: "if (options?.debug) {\n  console.log('Processing data:', data);\n}\n\n// Process the data\nconst result = data;\n\nreturn result;",
            },
        ],
        tags: ['typescript', 'function'],
        version: '1.0.0',
        author: 'Quantum Qoding',
        createdAt: new Date(),
        updatedAt: new Date(),
        usageCount: 0,
        rating: 5,
    };
    // Interface template
    const interfaceTemplate = {
        id: uuidv4(),
        name: 'TypeScript Interface',
        description: 'A TypeScript interface with properties and methods',
        language: ProgrammingLanguage.TYPESCRIPT,
        category: TemplateCategory.INTERFACE,
        content: `/**
 * ${interfaceName} interface
 * ${interfaceDescription}
 */
export interface ${interfaceName} {
  /** ${propertyName} - ${propertyDescription} */
  ${propertyName}: ${propertyType};
  
  /**
   * ${methodName} method
   * ${methodDescription}
   */
  ${methodName}(${methodParams}): ${returnType};
}`,
        variables: [
            {
                name: 'interfaceName',
                type: VariableType.IDENTIFIER,
                description: 'The name of the interface',
                required: true,
                defaultValue: 'DataProcessor',
            },
            {
                name: 'interfaceDescription',
                type: VariableType.STRING,
                description: 'A description of the interface',
                required: false,
                defaultValue: 'Interface for data processing',
            },
            {
                name: 'propertyName',
                type: VariableType.IDENTIFIER,
                description: 'The name of the property',
                required: false,
                defaultValue: 'name',
            },
            {
                name: 'propertyDescription',
                type: VariableType.STRING,
                description: 'A description of the property',
                required: false,
                defaultValue: 'The name of the processor',
            },
            {
                name: 'propertyType',
                type: VariableType.TYPE,
                description: 'The type of the property',
                required: false,
                defaultValue: 'string',
            },
            {
                name: 'methodName',
                type: VariableType.IDENTIFIER,
                description: 'The name of the method',
                required: false,
                defaultValue: 'process',
            },
            {
                name: 'methodDescription',
                type: VariableType.STRING,
                description: 'A description of the method',
                required: false,
                defaultValue: 'Processes the input data',
            },
            {
                name: 'methodParams',
                type: VariableType.PARAMETER,
                description: 'The method parameters',
                required: false,
                defaultValue: 'data: any, options?: { debug?: boolean }',
            },
            {
                name: 'returnType',
                type: VariableType.TYPE,
                description: 'The return type of the method',
                required: false,
                defaultValue: 'any',
            },
        ],
        tags: ['typescript', 'interface'],
        version: '1.0.0',
        author: 'Quantum Qoding',
        createdAt: new Date(),
        updatedAt: new Date(),
        usageCount: 0,
        rating: 5,
    };
    // Add templates to repository
    await repository.addTemplate(classTemplate);
    await repository.addTemplate(functionTemplate);
    await repository.addTemplate(interfaceTemplate);
}
/**
 * Add Python templates
 */
async function addPythonTemplates(repository) {
    // Python class template
    const pythonClassTemplate = {
        id: uuidv4(),
        name: 'Python Class',
        description: 'A Python class with constructor and methods',
        language: ProgrammingLanguage.PYTHON,
        category: TemplateCategory.CLASS,
        content: `class ${className}:
    """
    ${classDescription}
    """
    
    def __init__(self, ${constructorParams}):
        """
        Initialize the ${className} instance
        
        Args:
            ${paramDocs}
        """
        ${constructorBody}
    
    def ${methodName}(self, ${methodParams}):
        """
        ${methodDescription}
        
        Args:
            ${methodParamDocs}
            
        Returns:
            ${returnDescription}
        """
        ${methodBody}`,
        variables: [
            {
                name: 'className',
                type: VariableType.IDENTIFIER,
                description: 'The name of the class',
                required: true,
                defaultValue: 'MyClass',
            },
            {
                name: 'classDescription',
                type: VariableType.STRING,
                description: 'A description of the class',
                required: false,
                defaultValue: 'A class that does something',
            },
            {
                name: 'constructorParams',
                type: VariableType.PARAMETER,
                description: 'The constructor parameters',
                required: false,
                defaultValue: 'name, value=0',
            },
            {
                name: 'paramDocs',
                type: VariableType.STRING,
                description: 'The parameter documentation',
                required: false,
                defaultValue: 'name: The name of the instance\n            value: The initial value',
            },
            {
                name: 'constructorBody',
                type: VariableType.BLOCK,
                description: 'The constructor body',
                required: false,
                defaultValue: 'self.name = name\n        self.value = value',
            },
            {
                name: 'methodName',
                type: VariableType.IDENTIFIER,
                description: 'The name of the method',
                required: false,
                defaultValue: 'get_value',
            },
            {
                name: 'methodParams',
                type: VariableType.PARAMETER,
                description: 'The method parameters',
                required: false,
                defaultValue: 'multiplier=1',
            },
            {
                name: 'methodDescription',
                type: VariableType.STRING,
                description: 'A description of the method',
                required: false,
                defaultValue: 'Gets the current value',
            },
            {
                name: 'methodParamDocs',
                type: VariableType.STRING,
                description: 'The method parameter documentation',
                required: false,
                defaultValue: 'multiplier: The multiplier to apply to the value',
            },
            {
                name: 'returnDescription',
                type: VariableType.STRING,
                description: 'A description of the return value',
                required: false,
                defaultValue: 'The current value multiplied by the multiplier',
            },
            {
                name: 'methodBody',
                type: VariableType.BLOCK,
                description: 'The method body',
                required: false,
                defaultValue: 'return self.value * multiplier',
            },
        ],
        tags: ['python', 'class', 'oop'],
        version: '1.0.0',
        author: 'Quantum Qoding',
        createdAt: new Date(),
        updatedAt: new Date(),
        usageCount: 0,
        rating: 5,
    };
    // Add templates to repository
    await repository.addTemplate(pythonClassTemplate);
}
/**
 * Add HTML/CSS templates
 */
async function addWebTemplates(repository) {
    // HTML template
    const htmlTemplate = {
        id: uuidv4(),
        name: 'HTML Page',
        description: 'A basic HTML page template',
        language: ProgrammingLanguage.HTML,
        category: TemplateCategory.SNIPPET,
        content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        ${styles}
    </style>
</head>
<body>
    <header>
        <h1>${heading}</h1>
    </header>
    
    <main>
        ${content}
    </main>
    
    <footer>
        <p>${footer}</p>
    </footer>
    
    <script>
        ${script}
    </script>
</body>
</html>`,
        variables: [
            {
                name: 'title',
                type: VariableType.STRING,
                description: 'The page title',
                required: true,
                defaultValue: 'My Page',
            },
            {
                name: 'heading',
                type: VariableType.STRING,
                description: 'The main heading',
                required: false,
                defaultValue: 'Welcome to My Page',
            },
            {
                name: 'content',
                type: VariableType.BLOCK,
                description: 'The main content',
                required: false,
                defaultValue: '<p>This is the main content of the page.</p>',
            },
            {
                name: 'footer',
                type: VariableType.STRING,
                description: 'The footer text',
                required: false,
                defaultValue: '© 2023 My Website',
            },
            {
                name: 'styles',
                type: VariableType.BLOCK,
                description: 'The CSS styles',
                required: false,
                defaultValue: 'body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 20px;\n}\n\nheader, footer {\n    background-color: #f4f4f4;\n    padding: 10px;\n    text-align: center;\n}',
            },
            {
                name: 'script',
                type: VariableType.BLOCK,
                description: 'The JavaScript code',
                required: false,
                defaultValue: "document.addEventListener('DOMContentLoaded', function() {\n    console.log('Page loaded');\n});",
            },
        ],
        tags: ['html', 'web', 'template'],
        version: '1.0.0',
        author: 'Quantum Qoding',
        createdAt: new Date(),
        updatedAt: new Date(),
        usageCount: 0,
        rating: 5,
    };
    // Add templates to repository
    await repository.addTemplate(htmlTemplate);
}
