/**
 * Example usage of Predictive Knowledge Recommendation
 * Demonstrates how to use the recommendation engine
 */
import { createKnowledgeTransferSystem, KnowledgeType, RecommendationContext, RelevanceLevel, } from '../../index';
/**
 * Mock IDE context provider
 */
class MockIDEContextProvider {
    constructor(projectId, filePath, fileContent) {
        this.projectId = projectId;
        this.filePath = filePath;
        this.fileContent = fileContent;
    }
    getCurrentFilePath() {
        return this.filePath;
    }
    getCurrentFileContent() {
        return this.fileContent;
    }
    getCursorPosition() {
        return { line: 10, column: 5 };
    }
    getSelection() {
        return {
            startLine: 10,
            startColumn: 5,
            endLine: 15,
            endColumn: 10,
            text: 'function fetchData() {\n  // TODO: Implement error handling\n  return fetch("/api/data").then(res => res.json());\n}',
        };
    }
    getRecentFiles() {
        return [
            {
                path: this.filePath,
                lastAccessed: new Date(),
                accessType: 'edit',
            },
            {
                path: '/path/to/project/src/utils/api.js',
                lastAccessed: new Date(Date.now() - 5 * 60 * 1000),
                accessType: 'view',
            },
        ];
    }
    getRecentCommands() {
        return [
            {
                command: 'search.action.openEditor',
                timestamp: new Date(Date.now() - 2 * 60 * 1000),
            },
            {
                command: 'editor.action.formatDocument',
                timestamp: new Date(Date.now() - 3 * 60 * 1000),
            },
        ];
    }
    getRecentErrors() {
        return [
            {
                message: 'TypeError: Cannot read property "data" of undefined',
                location: this.filePath + ':12:10',
                timestamp: new Date(Date.now() - 1 * 60 * 1000),
            },
        ];
    }
    getRecentSearches() {
        return [
            {
                query: 'error handling',
                timestamp: new Date(Date.now() - 10 * 60 * 1000),
            },
            {
                query: 'api fetch',
                timestamp: new Date(Date.now() - 15 * 60 * 1000),
            },
        ];
    }
    getCurrentProjectId() {
        return this.projectId;
    }
}
/**
 * Run the example
 */
async function runExample() {
    console.log('Predictive Knowledge Recommendation Example');
    console.log('------------------------------------------');
    // Create the knowledge transfer system
    const system = createKnowledgeTransferSystem();
    // Add some projects
    console.log('\n1. Setting up projects...');
    system.projectManager.addProject({
        id: 'project-a',
        name: 'Project A',
        description: 'A web application project',
        rootPath: '/path/to/project-a',
        primaryLanguage: 'javascript',
        languages: ['javascript', 'html', 'css'],
        frameworks: ['react', 'express'],
        dependencies: {
            react: '^17.0.2',
            express: '^4.17.1',
        },
        tags: ['web', 'frontend', 'backend'],
        createdAt: new Date(),
        updatedAt: new Date(),
        metadata: {},
    });
    console.log(`Added project: ${system.projectManager.getProject('project-a')?.name}`);
    // Create some knowledge
    console.log('\n2. Creating knowledge...');
    const errorHandlingPattern = await system.transferManager.createKnowledge(KnowledgeType.CODE_PATTERN, 'Error Handling Pattern', 'A reusable pattern for handling errors in async operations', `
async function safeOperation(operation) {
  try {
    const result = await operation();
    return [result, null];
  } catch (error) {
    console.error('Operation failed:', error);
    return [null, error];
  }
}

// Usage example
async function fetchData(url) {
  const [data, error] = await safeOperation(() => fetch(url).then(res => res.json()));
  
  if (error) {
    // Handle error
    return null;
  }
  
  return data;
}
    `, 'project-a', ['error-handling', 'async', 'utility'], {
        language: 'javascript',
        compatibility: {
            languages: ['javascript', 'typescript'],
            frameworks: ['react', 'express'],
            environments: ['web', 'server'],
        },
    });
    console.log(`Created knowledge: ${errorHandlingPattern.title}`);
    // Create developer context
    console.log('\n3. Creating developer context...');
    const contextProvider = new MockIDEContextProvider('project-a', '/path/to/project-a/src/components/DataFetcher.js', `
import React, { useState, useEffect } from 'react';

function DataFetcher({ url }) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchData();
  }, [url]);

  function fetchData() {
    // TODO: Implement error handling
    return fetch(url).then(res => res.json()).then(data => {
      setData(data);
      setLoading(false);
    });
  }

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  if (!data) return null;

  return (
    <div className="data-container">
      {/* Render data */}
      {JSON.stringify(data)}
    </div>
  );
}

export default DataFetcher;
    `);
    // Create developer context
    const context = {
        projectId: contextProvider.getCurrentProjectId(),
        filePath: contextProvider.getCurrentFilePath(),
        fileContent: contextProvider.getCurrentFileContent(),
        cursorPosition: contextProvider.getCursorPosition(),
        selection: contextProvider.getSelection(),
        recentFiles: contextProvider.getRecentFiles(),
        recentCommands: contextProvider.getRecentCommands(),
        recentErrors: contextProvider.getRecentErrors(),
        recentSearches: contextProvider.getRecentSearches(),
        context: RecommendationContext.DEBUGGING,
    };
    console.log(`Created context for file: ${context.filePath}`);
    // Generate recommendations
    console.log('\n4. Generating recommendations...');
    const recommendations = await system.recommendationEngine.generateRecommendations(context);
    console.log(`Generated ${recommendations.length} recommendations:`);
    for (const recommendation of recommendations) {
        console.log(`\n- ${recommendation.knowledge.title} (Relevance: ${recommendation.relevanceScore.toFixed(2)}, Level: ${recommendation.relevanceLevel})`);
        console.log(`  Reason: ${recommendation.reason}`);
        if (recommendation.applicationMethod) {
            console.log('  Application method available');
        }
    }
    // Filter recommendations
    console.log('\n5. Filtering recommendations...');
    const filter = {
        relevanceLevels: [RelevanceLevel.CRITICAL, RelevanceLevel.HIGH],
        minRelevanceScore: 0.7,
    };
    const filteredRecommendations = system.recommendationEngine.getActiveRecommendations(filter);
    console.log(`Filtered to ${filteredRecommendations.length} high-relevance recommendations`);
    // Mark recommendation as viewed and applied
    if (recommendations.length > 0) {
        console.log('\n6. Interacting with recommendations...');
        const recommendation = recommendations[0];
        // Mark as viewed
        system.recommendationEngine.markAsViewed(recommendation.id);
        console.log(`Marked recommendation "${recommendation.knowledge.title}" as viewed`);
        // Mark as applied
        system.recommendationEngine.markAsApplied(recommendation.id);
        console.log(`Marked recommendation "${recommendation.knowledge.title}" as applied`);
        // Provide feedback
        system.recommendationEngine.provideFeedback(recommendation.id, 5, 'Very helpful recommendation!');
        console.log(`Provided positive feedback for recommendation "${recommendation.knowledge.title}"`);
    }
    console.log('\nExample completed successfully!');
}
// Run the example
runExample().catch(error => {
    console.error('Error running example:', error);
});
