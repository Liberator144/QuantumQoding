/**
 * Knowledge Extractor for Cross-Project Knowledge Transfer
 * Extracts reusable knowledge from project artifacts
 */
/**
 * Base class for knowledge extractors
 */
export class BaseKnowledgeExtractor {
    constructor(id, name, supportedTypes, supportedExtensions) {
        this.id = id;
        this.name = name;
        this.supportedTypes = supportedTypes;
        this.supportedExtensions = supportedExtensions;
    }
    /**
     * Check if this extractor can handle a file
     */
    canHandle(filePath, content) {
        const extension = filePath.split('.').pop()?.toLowerCase();
        return extension ? this.supportedExtensions.includes(extension) : false;
    }
    /**
     * Get language from file extension
     */
    getLanguageFromExtension(filePath) {
        const extension = filePath.split('.').pop()?.toLowerCase();
        if (!extension) {
            return undefined;
        }
        // Map common extensions to languages
        const extensionMap = {
            js: 'javascript',
            ts: 'typescript',
            jsx: 'javascript',
            tsx: 'typescript',
            py: 'python',
            rb: 'ruby',
            java: 'java',
            cs: 'csharp',
            go: 'go',
            rs: 'rust',
            php: 'php',
            swift: 'swift',
            kt: 'kotlin',
            c: 'c',
            cpp: 'cpp',
            h: 'c',
            hpp: 'cpp',
            html: 'html',
            css: 'css',
            scss: 'scss',
            json: 'json',
            md: 'markdown',
            sql: 'sql',
            sh: 'shell',
            bash: 'shell',
            yml: 'yaml',
            yaml: 'yaml',
            xml: 'xml',
            graphql: 'graphql',
            gql: 'graphql',
        };
        return extensionMap[extension];
    }
    /**
     * Create a basic knowledge entity
     */
    createBaseKnowledge(type, title, description, content, filePath, project, tags = []) {
        return {
            type,
            title,
            description,
            content,
            sourceProject: project.id,
            sourceFilePath: filePath,
            language: this.getLanguageFromExtension(filePath) || project.primaryLanguage,
            tags,
            createdBy: 'system',
            metadata: {},
        };
    }
}
