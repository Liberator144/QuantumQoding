/**
 * QQ-Akasha - Main Entry Point
 * Quantum Qoding Akasha - Advanced knowledge system that integrates all components into a unified system
 */
import { InMemoryStorage, MemoryBank, } from './core';
import { PriorityManager } from './prioritization';
import { GraphBuilder, RendererFactory } from './visualization';
import { IntegrationHub, IntegrationEvent } from './integration';
/**
 * Main QQ-Akasha class that integrates all components
 */
export class QQAkasha {
    constructor(options = {}) {
        // Initialize storage
        this.storage = options.storage || new InMemoryStorage();
        // Initialize memory bank
        this.memoryBank = new MemoryBank(this.storage);
        // Initialize integration hub
        this.integrationHub = new IntegrationHub();
        // Initialize priority manager
        this.priorityManager = new PriorityManager(this.memoryBank, {}, options.priorityUpdateIntervalMs);
        // Initialize graph builder
        this.graphBuilder = new GraphBuilder(this.memoryBank);
    }
    /**
     * Initialize the memory bank system
     */
    async initialize() {
        console.log('Initializing QQ-Akasha...');
        // Set up event listeners
        this.setupEventListeners();
        console.log('QQ-Akasha initialized successfully');
    }
    /**
     * Shutdown the memory bank system
     */
    async shutdown() {
        console.log('Shutting down QQ-Akasha...');
        // Stop priority updates
        this.priorityManager.stopPeriodicUpdates();
        // Shutdown integration hub
        await this.integrationHub.shutdown();
        console.log('QQ-Akasha shutdown complete');
    }
    /**
     * Create a new memory
     */
    async createMemory(content, type, tags = [], metadata = {}, options = {}) {
        const memory = await this.memoryBank.createMemory(content, type, tags, metadata, options);
        // Update priority
        await this.priorityManager.updateMemoryPriority(memory.id);
        return memory;
    }
    /**
     * Retrieve a memory by ID
     */
    async getMemory(id) {
        return this.memoryBank.getMemory(id);
    }
    /**
     * Update an existing memory
     */
    async updateMemory(id, updates) {
        const memory = await this.memoryBank.updateMemory(id, updates);
        // Update priority
        await this.priorityManager.updateMemoryPriority(id);
        return memory;
    }
    /**
     * Delete a memory
     */
    async deleteMemory(id) {
        return this.memoryBank.deleteMemory(id);
    }
    /**
     * Query memories
     */
    async queryMemories(query) {
        // Update priority context with query
        if (query.searchTerm) {
            this.priorityManager.setCurrentQuery(query.searchTerm);
        }
        const result = await this.memoryBank.queryMemories(query);
        return result.memories;
    }
    /**
     * Get high priority memories
     */
    async getHighPriorityMemories(limit = 10) {
        return this.priorityManager.getHighPriorityMemories(limit);
    }
    /**
     * Find related memories
     */
    async findRelatedMemories(memoryId, limit = 5) {
        return this.memoryBank.findRelatedMemories(memoryId, limit);
    }
    /**
     * Create a memory visualization
     */
    async createVisualization(query = {}, options = {}) {
        // Build the graph
        const graph = await this.graphBuilder.buildGraph(query, {
            includeRelated: options.includeRelated,
            maxRelatedDepth: options.maxRelatedDepth,
            title: options.title,
            description: options.description,
        });
        // Render the graph
        const renderer = RendererFactory.createRenderer(options.format || 'json');
        return renderer.render(graph);
    }
    /**
     * Set up event listeners
     */
    setupEventListeners() {
        // Example event listener
        this.integrationHub.on(IntegrationEvent.MEMORY_CREATED, message => {
            console.log(`Memory created: ${message.payload.id}`);
        });
    }
}
// Export all modules
export * from './core';
export * from './prioritization';
export * from './visualization';
export * from './integration';
