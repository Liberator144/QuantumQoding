/**
 * Basic usage example for QQ-Akasha
 */
import { MemoryType, QQAkasha } from '../index';
async function runExample() {
    console.log('Starting QQ-Akasha example...');
    // Create a new Akasha instance
    const akasha = new QQAkasha();
    // Initialize Akasha
    await akasha.initialize();
    try {
        // Create some memories
        console.log('Creating memories...');
        const codeMemory = await akasha.createMemory(`function calculateSum(a, b) {
  return a + b;
}`, MemoryType.CODE, ['javascript', 'function', 'math'], { importance: 0.7 }, { filePath: 'src/utils/math.js' });
        console.log(`Created code memory: ${codeMemory.id}`);
        const docMemory = await akasha.createMemory('The sum function adds two numbers and returns the result.', MemoryType.DOCUMENTATION, ['function', 'documentation', 'math'], {}, { filePath: 'docs/api.md' });
        console.log(`Created documentation memory: ${docMemory.id}`);
        const decisionMemory = await akasha.createMemory('We decided to implement the math utilities as pure functions for better testability.', MemoryType.DECISION, ['architecture', 'decision', 'testing'], { importance: 0.9 });
        console.log(`Created decision memory: ${decisionMemory.id}`);
        // Update a memory to establish relationships
        await akasha.updateMemory(codeMemory.id, {
            relatedMemories: [docMemory.id, decisionMemory.id],
        });
        // Query memories
        console.log('\nQuerying memories with tag "math"...');
        const mathMemories = await akasha.queryMemories({
            tags: ['math'],
        });
        console.log(`Found ${mathMemories.length} memories with tag "math":`);
        mathMemories.forEach(memory => {
            console.log(`- ${memory.id}: ${memory.content.substring(0, 50)}...`);
        });
        // Find related memories
        console.log('\nFinding memories related to code memory...');
        const relatedMemories = await akasha.findRelatedMemories(codeMemory.id);
        console.log(`Found ${relatedMemories.length} related memories:`);
        relatedMemories.forEach(memory => {
            console.log(`- ${memory.id}: ${memory.content.substring(0, 50)}...`);
        });
        // Get high priority memories
        console.log('\nGetting high priority memories...');
        const highPriorityMemories = await akasha.getHighPriorityMemories(5);
        console.log(`Found ${highPriorityMemories.length} high priority memories:`);
        highPriorityMemories.forEach(memory => {
            console.log(`- ${memory.id} (priority: ${memory.priorityScore?.toFixed(2)}): ${memory.content.substring(0, 50)}...`);
        });
        // Create a visualization
        console.log('\nCreating memory visualization...');
        const visualization = await akasha.createVisualization({}, // Query all memories
        {
            format: 'json',
            includeRelated: true,
            title: 'Example Memory Graph',
        });
        console.log('Memory visualization created:');
        console.log(`- ${visualization.nodes.length} nodes`);
        console.log(`- ${visualization.edges.length} edges`);
        // Output the visualization to a file
        const fs = require('fs');
        const path = require('path');
        const outputDir = path.join(__dirname, 'output');
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        fs.writeFileSync(path.join(outputDir, 'memory-graph.json'), JSON.stringify(visualization, null, 2));
        console.log('Visualization saved to output/memory-graph.json');
    }
    catch (error) {
        console.error('Error in example:', error);
    }
    finally {
        // Shutdown Akasha
        await akasha.shutdown();
        console.log('QQ-Akasha example completed');
    }
}
// Run the example
runExample().catch(console.error);
