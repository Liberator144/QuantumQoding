/**
 * Adapter Factory
 *
 * Factory for creating database adapters.
 *
 * @version 1.0.0
 */
import GitHubAdapter from './GitHubAdapter';
import SupabaseAdapter from './SupabaseAdapter';
import MongoDBAdapter from './MongoDBAdapter';
/**
 * Adapter types
 */
export var AdapterType;
(function (AdapterType) {
    AdapterType["GITHUB"] = "github";
    AdapterType["SUPABASE"] = "supabase";
    AdapterType["MONGODB"] = "mongodb";
})(AdapterType || (AdapterType = {}));
/**
 * Adapter factory
 */
export class AdapterFactory {
    /**
     * Register adapter
     * @param type - Adapter type
     * @param adapterClass - Adapter class
     */
    static registerAdapter(type, adapterClass) {
        AdapterFactory.adapters.set(type, adapterClass);
    }
    /**
     * Create adapter
     * @param type - Adapter type
     * @param options - Adapter options
     * @returns Database adapter
     */
    static createAdapter(type, options) {
        // Get adapter class
        const AdapterClass = AdapterFactory.adapters.get(type);
        if (!AdapterClass) {
            throw new Error(`Adapter type not registered: ${type}`);
        }
        // Create adapter
        return new AdapterClass(options);
    }
    /**
     * Create GitHub adapter
     * @param options - GitHub adapter options
     * @returns GitHub adapter
     */
    static createGitHubAdapter(options) {
        return AdapterFactory.createAdapter(AdapterType.GITHUB, options);
    }
    /**
     * Create Supabase adapter
     * @param options - Supabase adapter options
     * @returns Supabase adapter
     */
    static createSupabaseAdapter(options) {
        return AdapterFactory.createAdapter(AdapterType.SUPABASE, options);
    }
    /**
     * Create MongoDB adapter
     * @param options - MongoDB adapter options
     * @returns MongoDB adapter
     */
    static createMongoDBAdapter(options) {
        return AdapterFactory.createAdapter(AdapterType.MONGODB, options);
    }
}
/** Registered adapters */
AdapterFactory.adapters = new Map();
// Register adapters
AdapterFactory.registerAdapter(AdapterType.GITHUB, GitHubAdapter);
AdapterFactory.registerAdapter(AdapterType.SUPABASE, SupabaseAdapter);
AdapterFactory.registerAdapter(AdapterType.MONGODB, MongoDBAdapter);
export default AdapterFactory;
