/**
 * Dimensional Routes
 *
 * This module defines the dimensional boundary management routes for the QQ-Verse backend server.
 *
 * @version 1.0.0
 */
import express from 'express';
import { protect } from '../middleware/auth';
import * as dimensionalController from '../controllers/dimensional.controller';
const router = express.Router();
// Apply protection middleware to all routes
router.use(protect);
/**
 * @route   GET /api/v1/dimensional/dimensions
 * @desc    Get all dimensions
 * @access  Private
 */
router.get('/dimensions', dimensionalController.getAllDimensions);
/**
 * @route   GET /api/v1/dimensional/dimensions/:id
 * @desc    Get dimension by ID
 * @access  Private
 */
router.get('/dimensions/:id', dimensionalController.getDimensionById);
/**
 * @route   POST /api/v1/dimensional/dimensions
 * @desc    Create a new dimension
 * @access  Private
 */
router.post('/dimensions', dimensionalController.createDimension);
/**
 * @route   PUT /api/v1/dimensional/dimensions/:id
 * @desc    Update dimension
 * @access  Private
 */
router.put('/dimensions/:id', dimensionalController.updateDimension);
/**
 * @route   DELETE /api/v1/dimensional/dimensions/:id
 * @desc    Delete dimension
 * @access  Private
 */
router.delete('/dimensions/:id', dimensionalController.deleteDimension);
/**
 * @route   GET /api/v1/dimensional/boundaries
 * @desc    Get all boundaries
 * @access  Private
 */
router.get('/boundaries', dimensionalController.getAllBoundaries);
/**
 * @route   GET /api/v1/dimensional/boundaries/:id
 * @desc    Get boundary by ID
 * @access  Private
 */
router.get('/boundaries/:id', dimensionalController.getBoundaryById);
/**
 * @route   POST /api/v1/dimensional/boundaries
 * @desc    Create a new boundary
 * @access  Private
 */
router.post('/boundaries', dimensionalController.createBoundary);
/**
 * @route   PUT /api/v1/dimensional/boundaries/:id
 * @desc    Update boundary
 * @access  Private
 */
router.put('/boundaries/:id', dimensionalController.updateBoundary);
/**
 * @route   DELETE /api/v1/dimensional/boundaries/:id
 * @desc    Delete boundary
 * @access  Private
 */
router.delete('/boundaries/:id', dimensionalController.deleteBoundary);
/**
 * @route   GET /api/v1/dimensional/boundaries/between/:sourceId/:targetId
 * @desc    Get boundaries between dimensions
 * @access  Private
 */
router.get('/boundaries/between/:sourceId/:targetId', dimensionalController.getBoundariesBetweenDimensions);
/**
 * @route   PUT /api/v1/dimensional/boundaries/:id/state
 * @desc    Update boundary state
 * @access  Private
 */
router.put('/boundaries/:id/state', dimensionalController.updateBoundaryState);
/**
 * @route   PUT /api/v1/dimensional/boundaries/:id/permissions
 * @desc    Update boundary permissions
 * @access  Private
 */
router.put('/boundaries/:id/permissions', dimensionalController.updateBoundaryPermissions);
/**
 * @route   POST /api/v1/dimensional/boundaries/:id/cross
 * @desc    Cross boundary
 * @access  Private
 */
router.post('/boundaries/:id/cross', dimensionalController.crossBoundary);
/**
 * @route   GET /api/v1/dimensional/boundaries/:id/crossings
 * @desc    Get boundary crossings
 * @access  Private
 */
router.get('/boundaries/:id/crossings', dimensionalController.getBoundaryCrossings);
export default router;
