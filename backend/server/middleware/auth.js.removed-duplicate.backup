/**
 * Authentication Middleware
 *
 * This middleware handles authentication in the QQ-Verse backend server.
 *
 * @version 1.0.0
 */
import jwt from 'jsonwebtoken';
import { config } from '../config';
import { AppError } from './errorHandler';
import { logger } from '../utils/logger';
/**
 * Protect routes middleware
 */
export const protect = async (req, res, next) => {
    try {
        // Get token from authorization header
        let token;
        if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
            token = req.headers.authorization.split(' ')[1];
        }
        // Check if token exists
        if (!token) {
            return next(new AppError('You are not logged in! Please log in to get access.', 401));
        }
        // Verify token
        const decoded = jwt.verify(token, config.jwtSecret);
        // Check if user still exists
        // This would typically involve a database lookup
        // For now, we'll just pass the decoded user to the request
        req.user = decoded;
        next();
    }
    catch (error) {
        logger.error('Authentication error:', error);
        if (error instanceof jwt.JsonWebTokenError) {
            return next(new AppError('Invalid token. Please log in again!', 401));
        }
        if (error instanceof jwt.TokenExpiredError) {
            return next(new AppError('Your token has expired! Please log in again.', 401));
        }
        return next(new AppError('Authentication failed!', 401));
    }
};
/**
 * Restrict to roles middleware
 */
export const restrictTo = (...roles) => {
    return (req, res, next) => {
        // Check if user has required role
        if (!req.user || !roles.includes(req.user.role)) {
            return next(new AppError('You do not have permission to perform this action', 403));
        }
        next();
    };
};
/**
 * Generate JWT token
 */
export const generateToken = (payload) => {
    return jwt.sign(payload, config.jwtSecret, {
        expiresIn: config.jwtExpiresIn,
    });
};
export default {
    protect,
    restrictTo,
    generateToken,
};
