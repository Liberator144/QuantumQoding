/**
 * Accessibility Tests
 *
 * This module contains accessibility tests for the QQ-Verse backend server.
 *
 * @version 1.0.0
 */
import { axe, toHaveNoViolations } from 'jest-axe';
import { JSDOM } from 'jsdom';
import request from 'supertest';
import { app } from '../../index';
// Extend Jest matchers
expect.extend(toHaveNoViolations);
describe('Accessibility Tests', () => {
    // Setup JSDOM
    let dom;
    beforeEach(() => {
        dom = new JSDOM('<!DOCTYPE html><html><body></body></html>', {
            runScripts: 'dangerously',
        });
        global.document = dom.window.document;
        global.window = dom.window;
    });
    afterEach(() => {
        dom.window.close();
    });
    describe('API Documentation', () => {
        it('should have no accessibility violations in API docs', async () => {
            // Fetch API docs
            const response = await request(app).get('/api-docs');
            // Set HTML content
            document.body.innerHTML = response.text;
            // Run axe
            const results = await axe(document.body);
            // Assert no violations
            expect(results).toHaveNoViolations();
        });
    });
    describe('Error Responses', () => {
        it('should have accessible error messages', async () => {
            // Create HTML representation of error response
            const errorResponse = {
                status: 'error',
                message: 'Something went wrong',
                details: 'Additional error details',
            };
            const errorHtml = `
        <div class="error-container">
          <h2>Error</h2>
          <p class="error-message">${errorResponse.message}</p>
          <p class="error-details">${errorResponse.details}</p>
        </div>
      `;
            // Set HTML content
            document.body.innerHTML = errorHtml;
            // Run axe
            const results = await axe(document.body);
            // Assert no violations
            expect(results).toHaveNoViolations();
        });
    });
    describe('Response Format', () => {
        it('should have screen reader friendly JSON structure', async () => {
            // Fetch a sample API response
            const response = await request(app)
                .get('/health')
                .set('Accept', 'application/json');
            // Check response structure
            expect(response.body).toHaveProperty('status');
            expect(response.body.status).toBe('success');
            // Create HTML representation of JSON response
            const jsonHtml = `
        <pre id="json-response">
          ${JSON.stringify(response.body, null, 2)}
        </pre>
      `;
            // Set HTML content
            document.body.innerHTML = jsonHtml;
            // Run axe
            const results = await axe(document.body);
            // Assert no violations
            expect(results).toHaveNoViolations();
        });
    });
});
