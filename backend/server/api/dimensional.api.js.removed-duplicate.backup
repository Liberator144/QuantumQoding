/**
 * Dimensional API
 *
 * This module defines the dimensional boundary management API endpoints.
 *
 * @version 1.0.0
 */
import { protect } from '../middleware/auth';
import * as dimensionalController from '../controllers/dimensional.controller';
import { logger } from '../utils/logger';
/**
 * Setup dimensional API endpoints
 */
export const setupDimensionalAPI = (app) => {
    const basePath = '/api/v1/dimensional';
    logger.info(`Setting up dimensional API endpoints at ${basePath}`);
    // Get all dimensions
    app.get(`${basePath}/dimensions`, protect, dimensionalController.getAllDimensions);
    // Get dimension by ID
    app.get(`${basePath}/dimensions/:id`, protect, dimensionalController.getDimensionById);
    // Create a new dimension
    app.post(`${basePath}/dimensions`, protect, dimensionalController.createDimension);
    // Update dimension
    app.put(`${basePath}/dimensions/:id`, protect, dimensionalController.updateDimension);
    // Delete dimension
    app.delete(`${basePath}/dimensions/:id`, protect, dimensionalController.deleteDimension);
    // Get all boundaries
    app.get(`${basePath}/boundaries`, protect, dimensionalController.getAllBoundaries);
    // Get boundary by ID
    app.get(`${basePath}/boundaries/:id`, protect, dimensionalController.getBoundaryById);
    // Create a new boundary
    app.post(`${basePath}/boundaries`, protect, dimensionalController.createBoundary);
    // Update boundary
    app.put(`${basePath}/boundaries/:id`, protect, dimensionalController.updateBoundary);
    // Delete boundary
    app.delete(`${basePath}/boundaries/:id`, protect, dimensionalController.deleteBoundary);
    // Get boundaries between dimensions
    app.get(`${basePath}/boundaries/between/:sourceId/:targetId`, protect, dimensionalController.getBoundariesBetweenDimensions);
    // Update boundary state
    app.put(`${basePath}/boundaries/:id/state`, protect, dimensionalController.updateBoundaryState);
    // Update boundary permissions
    app.put(`${basePath}/boundaries/:id/permissions`, protect, dimensionalController.updateBoundaryPermissions);
    // Cross boundary
    app.post(`${basePath}/boundaries/:id/cross`, protect, dimensionalController.crossBoundary);
    // Get boundary crossings
    app.get(`${basePath}/boundaries/:id/crossings`, protect, dimensionalController.getBoundaryCrossings);
    logger.info(`Dimensional API endpoints setup complete`);
};
export default setupDimensionalAPI;
