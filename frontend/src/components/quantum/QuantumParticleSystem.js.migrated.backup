/**
 * Quantum Particle System Component
 *
 * This component renders quantum particle effects using the QuantumParticleRenderer.
 *
 * @version 1.0.0
 */
import React, { useEffect, useRef } from 'react';
import { VisualizationEngine } from '../../../visualization';
import { QuantumParticleRenderer, QuantumEffectType } from '../../../visualization/charts/QuantumParticleRenderer';
const QuantumParticleSystem = ({ effectType = QuantumEffectType.WAVE_PARTICLE_DUALITY, particleCount = 1000, particleSize = 2, particleColor = '#4fc3f7', waveAmplitude = 20, waveFrequency = 0.02, entanglementStrength = 0.8, tunnelingProbability = 0.3, width = 800, height = 600, enableAnimations = true, enableInteractions = true, theme = 'quantum', onClick, }) => {
    // Refs
    const containerRef = useRef(null);
    const engineRef = useRef(null);
    const rendererRef = useRef(null);
    // Initialize visualization engine and renderer
    useEffect(() => {
        if (!containerRef.current)
            return;
        // Create visualization engine
        const engine = new VisualizationEngine();
        engineRef.current = engine;
        // Create quantum particle renderer
        const renderer = new QuantumParticleRenderer({
            effectType,
            particleCount,
            particleSize,
            particleColor,
            waveAmplitude,
            waveFrequency,
            entanglementStrength,
            tunnelingProbability,
            enableAnimations,
            enableInteractions,
            theme,
            width,
            height,
        });
        rendererRef.current = renderer;
        // Initialize renderer
        renderer.initialize();
        // Render particles
        renderer.render(containerRef.current, {});
        // Cleanup
        return () => {
            renderer.dispose();
        };
    }, []);
    // Update renderer when props change
    useEffect(() => {
        if (!rendererRef.current)
            return;
        rendererRef.current.update({}, {
            effectType,
            particleCount,
            particleSize,
            particleColor,
            waveAmplitude,
            waveFrequency,
            entanglementStrength,
            tunnelingProbability,
            enableAnimations,
            enableInteractions,
            theme,
        });
    }, [
        effectType,
        particleCount,
        particleSize,
        particleColor,
        waveAmplitude,
        waveFrequency,
        entanglementStrength,
        tunnelingProbability,
        enableAnimations,
        enableInteractions,
        theme,
    ]);
    // Update renderer when size changes
    useEffect(() => {
        if (!rendererRef.current)
            return;
        rendererRef.current.resize(width, height);
    }, [width, height]);
    return (<div ref={containerRef} style={{
            width: `${width}px`,
            height: `${height}px`,
            position: 'relative',
            overflow: 'hidden',
        }} onClick={onClick}/>);
};
export default QuantumParticleSystem;
