/**
 * Visualization Engine
 *
 * A comprehensive engine for creating and managing data visualizations.
 *
 * @version 1.0.0
 */
// Import renderers
import { PatternHeatMapRenderer } from './charts/PatternHeatMapRenderer';
import { QueryRelationshipGraphRenderer } from './charts/QueryRelationshipGraphRenderer';
import { TimeSeriesRenderer } from './charts/TimeSeriesRenderer';
/**
 * Visualization Engine
 */
class VisualizationEngine {
    /**
     * Create a new VisualizationEngine instance
     * @param options - Configuration options
     */
    constructor(options = {}) {
        // Configuration
        this.config = {
            // Debug mode
            debugMode: false,
            // Default theme
            theme: 'light',
            // Default color palette
            colorPalette: 'quantum',
            // Animation enabled
            animationsEnabled: true,
            // Responsive design
            responsive: true,
            // Merge with provided options
            ...options,
        };
        // State
        this.visualizations = new Map();
        this.renderers = new Map();
        this.eventListeners = new Map();
        this.nextVisualizationId = 1;
        // Initialize
        this._init();
    }
    /**
     * Initialize the engine
     * @private
     */
    _init() {
        this.log('Initializing Visualization Engine');
        // Register built-in renderers
        this._registerBuiltInRenderers();
        this.log('Visualization Engine initialized');
    }
    /**
     * Register built-in renderers
     * @private
     */
    _registerBuiltInRenderers() {
        try {
            // Register renderers
            this.registerRenderer('patternHeatMap', new PatternHeatMapRenderer());
            this.registerRenderer('queryRelationshipGraph', new QueryRelationshipGraphRenderer());
            this.registerRenderer('timeSeries', new TimeSeriesRenderer());
            this.log(`Registered ${this.renderers.size} built-in renderers`);
        }
        catch (error) {
            this.log(`Error registering built-in renderers: ${error.message}`);
        }
    }
    /**
     * Register a renderer
     * @param name - Renderer name
     * @param renderer - Renderer instance
     * @returns This instance for chaining
     */
    registerRenderer(name, renderer) {
        if (!name || !renderer) {
            throw new Error('Renderer name and instance are required');
        }
        // Check if renderer is valid
        if (!renderer.render || typeof renderer.render !== 'function') {
            throw new Error('Invalid renderer: must implement render method');
        }
        this.renderers.set(name, renderer);
        this.log(`Registered renderer: ${name}`);
        return this;
    }
    /**
     * Get a renderer
     * @param name - Renderer name
     * @returns Renderer instance
     */
    getRenderer(name) {
        if (!this.renderers.has(name)) {
            throw new Error(`Renderer not found: ${name}`);
        }
        return this.renderers.get(name);
    }
    /**
     * Create a visualization
     * @param type - Visualization type
     * @param options - Visualization options
     * @returns Visualization instance
     */
    createVisualization(type, options = {}) {
        // Check if renderer exists
        if (!this.renderers.has(type)) {
            throw new Error(`Renderer not found: ${type}`);
        }
        // Get renderer
        const renderer = this.renderers.get(type);
        // Generate ID
        const id = this._generateId();
        // Create visualization
        const visualization = {
            id,
            type,
            options: {
                ...this.config,
                ...options,
            },
            renderer,
            data: null,
            element: null,
            state: {
                initialized: false,
                rendered: false,
                error: null,
            },
            createdAt: Date.now(),
        };
        // Store visualization
        this.visualizations.set(id, visualization);
        this.log(`Created visualization: ${id} (${type})`);
        return visualization;
    }
    /**
     * Get a visualization
     * @param id - Visualization ID
     * @returns Visualization instance
     */
    getVisualization(id) {
        if (!this.visualizations.has(id)) {
            throw new Error(`Visualization not found: ${id}`);
        }
        return this.visualizations.get(id);
    }
    /**
     * Remove a visualization
     * @param id - Visualization ID
     * @returns Success
     */
    removeVisualization(id) {
        if (!this.visualizations.has(id)) {
            return false;
        }
        // Get visualization
        const visualization = this.visualizations.get(id);
        // Clean up
        if (visualization.element) {
            try {
                // Clear element
                visualization.element.innerHTML = '';
            }
            catch (error) {
                this.log(`Error clearing element: ${error.message}`);
            }
        }
        // Remove from map
        this.visualizations.delete(id);
        this.log(`Removed visualization: ${id}`);
        return true;
    }
    /**
     * Set data for a visualization
     * @param id - Visualization ID
     * @param data - Visualization data
     * @returns Visualization instance
     */
    setData(id, data) {
        // Get visualization
        const visualization = this.getVisualization(id);
        // Set data
        visualization.data = data;
        // Update visualization if already rendered
        if (visualization.state.rendered && visualization.element) {
            this._renderVisualization(visualization);
        }
        this.log(`Set data for visualization: ${id}`);
        return visualization;
    }
    /**
     * Render a visualization
     * @param id - Visualization ID
     * @param element - DOM element to render into
     * @returns Visualization instance
     */
    render(id, element) {
        // Get visualization
        const visualization = this.getVisualization(id);
        // Check element
        if (!element || !(element instanceof HTMLElement)) {
            throw new Error('Valid DOM element is required');
        }
        // Set element
        visualization.element = element;
        // Render visualization
        this._renderVisualization(visualization);
        return visualization;
    }
    /**
     * Render a visualization
     * @param visualization - Visualization instance
     * @private
     */
    _renderVisualization(visualization) {
        try {
            // Clear element
            if (visualization.element) {
                visualization.element.innerHTML = '';
            }
            // Initialize if not already
            if (!visualization.state.initialized) {
                visualization.renderer.initialize(visualization.options);
                visualization.state.initialized = true;
            }
            // Render
            visualization.renderer.render(visualization.element, visualization.data, visualization.options);
            // Update state
            visualization.state.rendered = true;
            visualization.state.error = null;
            // Emit event
            this._emit('render', {
                id: visualization.id,
                type: visualization.type,
                element: visualization.element,
            });
            this.log(`Rendered visualization: ${visualization.id}`);
        }
        catch (error) {
            // Update state
            visualization.state.error = error.message;
            // Emit event
            this._emit('error', {
                id: visualization.id,
                type: visualization.type,
                error: error.message,
            });
            this.log(`Error rendering visualization: ${error.message}`);
            // Re-throw error
            throw error;
        }
    }
    /**
     * Update a visualization
     * @param id - Visualization ID
     * @param options - Visualization options
     * @returns Visualization instance
     */
    update(id, options = {}) {
        // Get visualization
        const visualization = this.getVisualization(id);
        // Update options
        visualization.options = {
            ...visualization.options,
            ...options,
        };
        // Update visualization if already rendered
        if (visualization.state.rendered && visualization.element) {
            this._renderVisualization(visualization);
        }
        this.log(`Updated visualization: ${id}`);
        return visualization;
    }
    /**
     * Destroy a visualization
     * @param id - Visualization ID
     * @returns Success
     */
    destroy(id) {
        // Get visualization
        const visualization = this.getVisualization(id);
        // Destroy renderer
        if (visualization.renderer && visualization.element) {
            visualization.renderer.destroy(visualization.element);
        }
        // Remove visualization
        return this.removeVisualization(id);
    }
    /**
     * Add event listener
     * @param event - Event name
     * @param listener - Event listener
     * @returns This instance for chaining
     */
    on(event, listener) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(listener);
        return this;
    }
    /**
     * Remove event listener
     * @param event - Event name
     * @param listener - Event listener
     * @returns This instance for chaining
     */
    off(event, listener) {
        if (!this.eventListeners.has(event)) {
            return this;
        }
        const listeners = this.eventListeners.get(event);
        const index = listeners.indexOf(listener);
        if (index !== -1) {
            listeners.splice(index, 1);
        }
        return this;
    }
    /**
     * Emit event
     * @param event - Event name
     * @param data - Event data
     * @private
     */
    _emit(event, data) {
        if (!this.eventListeners.has(event)) {
            return;
        }
        const listeners = this.eventListeners.get(event);
        for (const listener of listeners) {
            try {
                listener(data);
            }
            catch (error) {
                console.error(`Error in event listener for ${event}:`, error);
            }
        }
    }
    /**
     * Generate unique ID
     * @returns Unique ID
     * @private
     */
    _generateId() {
        return `viz-${this.nextVisualizationId++}`;
    }
    /**
     * Log message if debug mode is enabled
     * @param message - Message to log
     * @private
     */
    log(message) {
        if (this.config.debugMode) {
            console.log(`[VisualizationEngine] ${message}`);
        }
    }
}
export { VisualizationEngine };
