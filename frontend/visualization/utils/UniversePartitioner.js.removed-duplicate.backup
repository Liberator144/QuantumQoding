/**
 * Universe Partitioner
 *
 * Divides the universe into rendering sectors for efficient rendering.
 *
 * @version 1.0.0
 */
import * as THREE from 'three';
/**
 * Sector type
 */
export var SectorType;
(function (SectorType) {
    /** Empty sector */
    SectorType["EMPTY"] = "empty";
    /** Star sector */
    SectorType["STAR"] = "star";
    /** Galaxy sector */
    SectorType["GALAXY"] = "galaxy";
    /** Nebula sector */
    SectorType["NEBULA"] = "nebula";
    /** Black hole sector */
    SectorType["BLACK_HOLE"] = "black_hole";
    /** Quantum sector */
    SectorType["QUANTUM"] = "quantum";
})(SectorType || (SectorType = {}));
/**
 * Default options
 */
const defaultOptions = {
    sectorSize: 1000,
    activeSectorRadius: 1,
    loadSectorRadius: 2,
    unloadSectorRadius: 3,
    maxSectors: 100,
    loadSectorDelay: 500,
    unloadSectorDelay: 1000,
    enableSectorTransitions: true,
    sectorTransitionDuration: 1000,
    debugMode: false,
};
export class UniversePartitioner {
    /**
     * Constructor
     * @param scene - Scene
     * @param camera - Camera
     * @param options - Options
     */
    constructor(scene, camera, options = {}) {
        /** Sectors */
        this.sectors = new Map();
        /** Active sectors */
        this.activeSectors = new Set();
        /** Loading sectors */
        this.loadingSectors = new Set();
        /** Unloading sectors */
        this.unloadingSectors = new Set();
        /** Current sector coordinates */
        this.currentSectorCoordinates = { x: 0, y: 0, z: 0 };
        /** Current sector */
        this.currentSector = null;
        /** Sector transitions */
        this.sectorTransitions = new Map();
        /** Sector helpers */
        this.sectorHelpers = new Map();
        /** Object sector map */
        this.objectSectorMap = new Map();
        /** Load sector timer */
        this.loadSectorTimer = null;
        /** Unload sector timer */
        this.unloadSectorTimer = null;
        /** Is initialized */
        this.isInitialized = false;
        /** Stats */
        this.stats = {
            totalSectors: 0,
            activeSectors: 0,
            loadingSectors: 0,
            unloadingSectors: 0,
            totalObjects: 0,
            visibleObjects: 0,
            loadTime: 0,
            unloadTime: 0,
        };
        this.scene = scene;
        this.camera = camera;
        this.options = {
            ...defaultOptions,
            ...options,
        };
        this.log('Universe Partitioner initialized');
    }
    /**
     * Initialize the universe partitioner
     */
    initialize() {
        if (this.isInitialized) {
            return;
        }
        // Create initial sectors
        this.createInitialSectors();
        // Start timers
        this.startTimers();
        // Mark as initialized
        this.isInitialized = true;
        this.log('Universe Partitioner started');
    }
    /**
     * Create initial sectors
     */
    createInitialSectors() {
        // Get camera position
        const cameraPosition = new THREE.Vector3();
        this.camera.getWorldPosition(cameraPosition);
        // Calculate current sector coordinates
        this.currentSectorCoordinates = this.getSectorCoordinates(cameraPosition);
        // Create sectors around camera
        const radius = this.options.loadSectorRadius;
        for (let x = -radius; x <= radius; x++) {
            for (let y = -radius; y <= radius; y++) {
                for (let z = -radius; z <= radius; z++) {
                    const sectorCoordinates = {
                        x: this.currentSectorCoordinates.x + x,
                        y: this.currentSectorCoordinates.y + y,
                        z: this.currentSectorCoordinates.z + z,
                    };
                    this.createSector(sectorCoordinates);
                }
            }
        }
        // Set current sector
        const currentSectorId = this.getSectorId(this.currentSectorCoordinates);
        this.currentSector = this.sectors.get(currentSectorId) || null;
        // Update active sectors
        this.updateActiveSectors();
        // Assign objects to sectors
        this.assignObjectsToSectors();
    }
    /**
     * Start timers
     */
    startTimers() {
        // Clear existing timers
        this.stopTimers();
        // Start load sector timer
        this.loadSectorTimer = window.setInterval(() => {
            this.loadSectors();
        }, this.options.loadSectorDelay);
        // Start unload sector timer
        this.unloadSectorTimer = window.setInterval(() => {
            this.unloadSectors();
        }, this.options.unloadSectorDelay);
    }
    /**
     * Stop timers
     */
    stopTimers() {
        // Stop load sector timer
        if (this.loadSectorTimer !== null) {
            window.clearInterval(this.loadSectorTimer);
            this.loadSectorTimer = null;
        }
        // Stop unload sector timer
        if (this.unloadSectorTimer !== null) {
            window.clearInterval(this.unloadSectorTimer);
            this.unloadSectorTimer = null;
        }
    }
    /**
     * Get sector coordinates for position
     * @param position - Position
     * @returns Sector coordinates
     */
    getSectorCoordinates(position) {
        const sectorSize = this.options.sectorSize;
        return {
            x: Math.floor(position.x / sectorSize),
            y: Math.floor(position.y / sectorSize),
            z: Math.floor(position.z / sectorSize),
        };
    }
    /**
     * Get sector ID for coordinates
     * @param coordinates - Sector coordinates
     * @returns Sector ID
     */
    getSectorId(coordinates) {
        return `sector-${coordinates.x}-${coordinates.y}-${coordinates.z}`;
    }
    /**
     * Create sector
     * @param coordinates - Sector coordinates
     * @returns Sector
     */
    createSector(coordinates) {
        // Generate sector ID
        const sectorId = this.getSectorId(coordinates);
        // Check if sector already exists
        if (this.sectors.has(sectorId)) {
            return this.sectors.get(sectorId);
        }
        // Calculate sector center
        const sectorSize = this.options.sectorSize;
        const center = new THREE.Vector3((coordinates.x + 0.5) * sectorSize, (coordinates.y + 0.5) * sectorSize, (coordinates.z + 0.5) * sectorSize);
        // Calculate sector size
        const size = new THREE.Vector3(sectorSize, sectorSize, sectorSize);
        // Calculate bounding box
        const boundingBox = new THREE.Box3(new THREE.Vector3(coordinates.x * sectorSize, coordinates.y * sectorSize, coordinates.z * sectorSize), new THREE.Vector3((coordinates.x + 1) * sectorSize, (coordinates.y + 1) * sectorSize, (coordinates.z + 1) * sectorSize));
        // Determine sector type
        const sectorType = this.determineSectorType(coordinates);
        // Create sector
        const sector = {
            id: sectorId,
            type: sectorType,
            coordinates,
            center,
            size,
            boundingBox,
            objects: [],
            isLoaded: false,
            isActive: false,
            distanceToCamera: Infinity,
            lastUpdateTime: performance.now(),
        };
        // Store sector
        this.sectors.set(sectorId, sector);
        // Create sector helper if debug mode is enabled
        if (this.options.debugMode) {
            const helper = new THREE.Box3Helper(boundingBox, this.getSectorTypeColor(sectorType));
            this.scene.add(helper);
            this.sectorHelpers.set(sectorId, helper);
        }
        // Update stats
        this.stats.totalSectors = this.sectors.size;
        return sector;
    }
    /**
     * Determine sector type
     * @param coordinates - Sector coordinates
     * @returns Sector type
     */
    determineSectorType(coordinates) {
        // Use a deterministic algorithm to assign sector types
        // This ensures that the same coordinates always get the same sector type
        // Calculate a hash value from the coordinates
        const hash = Math.abs(coordinates.x * 73856093 ^
            coordinates.y * 19349663 ^
            coordinates.z * 83492791);
        // Determine sector type based on hash
        const value = hash % 100;
        if (value < 50) {
            return SectorType.EMPTY;
        }
        else if (value < 70) {
            return SectorType.STAR;
        }
        else if (value < 85) {
            return SectorType.GALAXY;
        }
        else if (value < 95) {
            return SectorType.NEBULA;
        }
        else if (value < 98) {
            return SectorType.BLACK_HOLE;
        }
        else {
            return SectorType.QUANTUM;
        }
    }
    /**
     * Get sector type color
     * @param type - Sector type
     * @returns Color
     */
    getSectorTypeColor(type) {
        switch (type) {
            case SectorType.EMPTY:
                return new THREE.Color(0x444444); // Gray
            case SectorType.STAR:
                return new THREE.Color(0xffff00); // Yellow
            case SectorType.GALAXY:
                return new THREE.Color(0x0088ff); // Blue
            case SectorType.NEBULA:
                return new THREE.Color(0xff00ff); // Purple
            case SectorType.BLACK_HOLE:
                return new THREE.Color(0x000000); // Black
            case SectorType.QUANTUM:
                return new THREE.Color(0x00ff88); // Teal
            default:
                return new THREE.Color(0xffffff); // White
        }
    }
    /**
     * Update active sectors
     */
    updateActiveSectors() {
        // Get camera position
        const cameraPosition = new THREE.Vector3();
        this.camera.getWorldPosition(cameraPosition);
        // Calculate current sector coordinates
        const currentCoordinates = this.getSectorCoordinates(cameraPosition);
        // Check if camera moved to a new sector
        if (currentCoordinates.x !== this.currentSectorCoordinates.x ||
            currentCoordinates.y !== this.currentSectorCoordinates.y ||
            currentCoordinates.z !== this.currentSectorCoordinates.z) {
            // Get previous sector
            const previousSectorId = this.getSectorId(this.currentSectorCoordinates);
            const previousSector = this.sectors.get(previousSectorId);
            // Update current sector coordinates
            this.currentSectorCoordinates = currentCoordinates;
            // Get current sector
            const currentSectorId = this.getSectorId(currentCoordinates);
            // Create current sector if it doesn't exist
            if (!this.sectors.has(currentSectorId)) {
                this.createSector(currentCoordinates);
            }
            // Update current sector
            this.currentSector = this.sectors.get(currentSectorId);
            // Start sector transition if enabled
            if (this.options.enableSectorTransitions && previousSector) {
                this.startSectorTransition(previousSector, this.currentSector);
            }
            // Create new sectors if needed
            const loadRadius = this.options.loadSectorRadius;
            for (let x = -loadRadius; x <= loadRadius; x++) {
                for (let y = -loadRadius; y <= loadRadius; y++) {
                    for (let z = -loadRadius; z <= loadRadius; z++) {
                        const sectorCoordinates = {
                            x: currentCoordinates.x + x,
                            y: currentCoordinates.y + y,
                            z: currentCoordinates.z + z,
                        };
                        // Create sector if it doesn't exist
                        if (!this.sectors.has(this.getSectorId(sectorCoordinates))) {
                            this.createSector(sectorCoordinates);
                        }
                    }
                }
            }
        }
        // Clear active sectors
        this.activeSectors.clear();
        // Update sector distances and status
        this.sectors.forEach((sector) => {
            // Calculate distance to camera
            sector.distanceToCamera = sector.center.distanceTo(cameraPosition);
            // Calculate sector distance in sector units
            const sectorDistance = Math.max(Math.abs(sector.coordinates.x - this.currentSectorCoordinates.x), Math.abs(sector.coordinates.y - this.currentSectorCoordinates.y), Math.abs(sector.coordinates.z - this.currentSectorCoordinates.z));
            // Update sector status
            if (sectorDistance <= this.options.activeSectorRadius) {
                sector.isActive = true;
                this.activeSectors.add(sector.id);
                // Load sector if not loaded
                if (!sector.isLoaded && !this.loadingSectors.has(sector.id)) {
                    this.loadingSectors.add(sector.id);
                }
            }
            else {
                sector.isActive = false;
                // Unload sector if loaded and outside unload radius
                if (sector.isLoaded &&
                    sectorDistance > this.options.unloadSectorRadius &&
                    !this.unloadingSectors.has(sector.id)) {
                    this.unloadingSectors.add(sector.id);
                }
            }
            // Update sector helper color if debug mode is enabled
            if (this.options.debugMode && this.sectorHelpers.has(sector.id)) {
                const helper = this.sectorHelpers.get(sector.id);
                if (sector.isActive) {
                    helper.material.color.set(0x00ff00); // Green for active sectors
                }
                else if (sector.isLoaded) {
                    helper.material.color.set(0xffff00); // Yellow for loaded sectors
                }
                else if (this.loadingSectors.has(sector.id)) {
                    helper.material.color.set(0x0088ff); // Blue for loading sectors
                }
                else if (this.unloadingSectors.has(sector.id)) {
                    helper.material.color.set(0xff0000); // Red for unloading sectors
                }
                else {
                    helper.material.color.set(this.getSectorTypeColor(sector.type));
                }
            }
        });
        // Update stats
        this.stats.activeSectors = this.activeSectors.size;
        this.stats.loadingSectors = this.loadingSectors.size;
        this.stats.unloadingSectors = this.unloadingSectors.size;
        // Update object visibility
        this.updateObjectVisibility();
    }
    /**
     * Assign objects to sectors
     */
    assignObjectsToSectors() {
        // Clear object sector map
        this.objectSectorMap.clear();
        // Clear sector objects
        this.sectors.forEach((sector) => {
            sector.objects = [];
        });
        // Assign objects to sectors
        this.scene.traverse((object) => {
            if (object.visible && !(object instanceof THREE.Camera) && !(object instanceof THREE.Light)) {
                this.assignObjectToSector(object);
            }
        });
        // Update stats
        this.stats.totalObjects = this.objectSectorMap.size;
    }
    /**
     * Assign object to sector
     * @param object - Object to assign
     */
    assignObjectToSector(object) {
        // Generate object ID
        const objectId = `object-${object.uuid}`;
        // Get object position
        const objectPosition = new THREE.Vector3();
        object.getWorldPosition(objectPosition);
        // Get sector coordinates
        const sectorCoordinates = this.getSectorCoordinates(objectPosition);
        // Get sector ID
        const sectorId = this.getSectorId(sectorCoordinates);
        // Create sector if it doesn't exist
        if (!this.sectors.has(sectorId)) {
            this.createSector(sectorCoordinates);
        }
        // Get sector
        const sector = this.sectors.get(sectorId);
        // Add object to sector
        sector.objects.push(object);
        // Map object to sector
        this.objectSectorMap.set(objectId, sectorId);
    }
    /**
     * Update object visibility
     */
    updateObjectVisibility() {
        // Reset visible objects count
        this.stats.visibleObjects = 0;
        // Update object visibility based on sector status
        this.objectSectorMap.forEach((sectorId, objectId) => {
            // Get object
            const objectUuid = objectId.replace('object-', '');
            let object = null;
            this.scene.traverse((node) => {
                if (node.uuid === objectUuid) {
                    object = node;
                }
            });
            if (!object) {
                return;
            }
            // Get sector
            if (!this.sectors.has(sectorId)) {
                return;
            }
            const sector = this.sectors.get(sectorId);
            // Update object visibility
            if (sector.isActive || sector.isLoaded) {
                object.visible = true;
                this.stats.visibleObjects++;
            }
            else {
                object.visible = false;
            }
        });
    }
    /**
     * Load sectors
     */
    loadSectors() {
        // Start timer
        const startTime = performance.now();
        // Process loading sectors
        const loadingSectors = Array.from(this.loadingSectors);
        for (const sectorId of loadingSectors) {
            // Get sector
            if (!this.sectors.has(sectorId)) {
                this.loadingSectors.delete(sectorId);
                continue;
            }
            const sector = this.sectors.get(sectorId);
            // Load sector
            this.loadSector(sector);
            // Remove from loading sectors
            this.loadingSectors.delete(sectorId);
        }
        // Update stats
        this.stats.loadTime = performance.now() - startTime;
    }
    /**
     * Load sector
     * @param sector - Sector to load
     */
    loadSector(sector) {
        // Skip if already loaded
        if (sector.isLoaded) {
            return;
        }
        // Generate sector content based on sector type
        this.generateSectorContent(sector);
        // Mark as loaded
        sector.isLoaded = true;
        // Update last update time
        sector.lastUpdateTime = performance.now();
        this.log(`Loaded sector: ${sector.id} (${sector.type})`);
    }
    /**
     * Unload sectors
     */
    unloadSectors() {
        // Start timer
        const startTime = performance.now();
        // Process unloading sectors
        const unloadingSectors = Array.from(this.unloadingSectors);
        for (const sectorId of unloadingSectors) {
            // Get sector
            if (!this.sectors.has(sectorId)) {
                this.unloadingSectors.delete(sectorId);
                continue;
            }
            const sector = this.sectors.get(sectorId);
            // Unload sector
            this.unloadSector(sector);
            // Remove from unloading sectors
            this.unloadingSectors.delete(sectorId);
        }
        // Update stats
        this.stats.unloadTime = performance.now() - startTime;
    }
    /**
     * Unload sector
     * @param sector - Sector to unload
     */
    unloadSector(sector) {
        // Skip if not loaded
        if (!sector.isLoaded) {
            return;
        }
        // Remove sector content
        this.removeSectorContent(sector);
        // Mark as not loaded
        sector.isLoaded = false;
        // Update last update time
        sector.lastUpdateTime = performance.now();
        this.log(`Unloaded sector: ${sector.id} (${sector.type})`);
    }
    /**
     * Generate sector content
     * @param sector - Sector to generate content for
     */
    generateSectorContent(sector) {
        // Generate content based on sector type
        switch (sector.type) {
            case SectorType.EMPTY:
                // Empty sector, no content
                break;
            case SectorType.STAR:
                this.generateStarSectorContent(sector);
                break;
            case SectorType.GALAXY:
                this.generateGalaxySectorContent(sector);
                break;
            case SectorType.NEBULA:
                this.generateNebulaSectorContent(sector);
                break;
            case SectorType.BLACK_HOLE:
                this.generateBlackHoleSectorContent(sector);
                break;
            case SectorType.QUANTUM:
                this.generateQuantumSectorContent(sector);
                break;
        }
    }
    /**
     * Generate star sector content
     * @param sector - Sector to generate content for
     */
    generateStarSectorContent(sector) {
        // Create star system
        const starCount = Math.floor(Math.random() * 5) + 1;
        for (let i = 0; i < starCount; i++) {
            // Create star
            const starGeometry = new THREE.SphereGeometry(5, 32, 32);
            const starMaterial = new THREE.MeshBasicMaterial({
                color: new THREE.Color(0xffff00),
                emissive: new THREE.Color(0xffff00),
                emissiveIntensity: 1,
            });
            const star = new THREE.Mesh(starGeometry, starMaterial);
            // Position star within sector
            const sectorSize = this.options.sectorSize;
            const x = sector.coordinates.x * sectorSize + Math.random() * sectorSize;
            const y = sector.coordinates.y * sectorSize + Math.random() * sectorSize;
            const z = sector.coordinates.z * sectorSize + Math.random() * sectorSize;
            star.position.set(x, y, z);
            // Add star to scene
            this.scene.add(star);
            // Add star to sector objects
            sector.objects.push(star);
            // Map star to sector
            this.objectSectorMap.set(`object-${star.uuid}`, sector.id);
        }
    }
    /**
     * Generate galaxy sector content
     * @param sector - Sector to generate content for
     */
    generateGalaxySectorContent(sector) {
        // Create galaxy
        const galaxyGeometry = new THREE.BufferGeometry();
        // Generate galaxy particles
        const particleCount = 1000;
        const positions = new Float32Array(particleCount * 3);
        const colors = new Float32Array(particleCount * 3);
        const galaxyRadius = 50;
        const galaxyThickness = 10;
        const galaxyArms = 5;
        for (let i = 0; i < particleCount; i++) {
            // Calculate particle position in galaxy
            const armAngle = (i % galaxyArms) * (2 * Math.PI / galaxyArms);
            const distanceFromCenter = Math.random() * galaxyRadius;
            const spiralAngle = distanceFromCenter * 0.1;
            const angle = armAngle + spiralAngle;
            // Add randomness
            const randX = (Math.random() - 0.5) * 5;
            const randY = (Math.random() - 0.5) * galaxyThickness;
            const randZ = (Math.random() - 0.5) * 5;
            // Calculate position
            const x = Math.cos(angle) * distanceFromCenter + randX;
            const y = randY;
            const z = Math.sin(angle) * distanceFromCenter + randZ;
            // Add position
            positions[i * 3] = x;
            positions[i * 3 + 1] = y;
            positions[i * 3 + 2] = z;
            // Calculate color based on distance from center
            const r = 0.3 + 0.7 * (1 - distanceFromCenter / galaxyRadius);
            const g = 0.3 + 0.7 * (1 - distanceFromCenter / galaxyRadius);
            const b = 0.5 + 0.5 * (1 - distanceFromCenter / galaxyRadius);
            // Add color
            colors[i * 3] = r;
            colors[i * 3 + 1] = g;
            colors[i * 3 + 2] = b;
        }
        // Set attributes
        galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        // Create galaxy material
        const galaxyMaterial = new THREE.PointsMaterial({
            size: 1,
            vertexColors: true,
            transparent: true,
            opacity: 0.8,
        });
        // Create galaxy
        const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial);
        // Position galaxy within sector
        const sectorSize = this.options.sectorSize;
        const x = sector.coordinates.x * sectorSize + sectorSize / 2;
        const y = sector.coordinates.y * sectorSize + sectorSize / 2;
        const z = sector.coordinates.z * sectorSize + sectorSize / 2;
        galaxy.position.set(x, y, z);
        // Add galaxy to scene
        this.scene.add(galaxy);
        // Add galaxy to sector objects
        sector.objects.push(galaxy);
        // Map galaxy to sector
        this.objectSectorMap.set(`object-${galaxy.uuid}`, sector.id);
    }
    /**
     * Generate nebula sector content
     * @param sector - Sector to generate content for
     */
    generateNebulaSectorContent(sector) {
        // Create nebula
        const nebulaGeometry = new THREE.BufferGeometry();
        // Generate nebula particles
        const particleCount = 1000;
        const positions = new Float32Array(particleCount * 3);
        const colors = new Float32Array(particleCount * 3);
        const sizes = new Float32Array(particleCount);
        const nebulaRadius = 100;
        for (let i = 0; i < particleCount; i++) {
            // Calculate random position within nebula volume
            const theta = Math.random() * Math.PI * 2;
            const phi = Math.acos(2 * Math.random() - 1);
            const r = Math.pow(Math.random(), 1 / 3) * nebulaRadius;
            // Convert to Cartesian coordinates
            const x = r * Math.sin(phi) * Math.cos(theta);
            const y = r * Math.sin(phi) * Math.sin(theta);
            const z = r * Math.cos(phi);
            // Add position
            positions[i * 3] = x;
            positions[i * 3 + 1] = y;
            positions[i * 3 + 2] = z;
            // Calculate color
            const r = 0.5 + 0.5 * Math.random();
            const g = 0.2 + 0.3 * Math.random();
            const b = 0.7 + 0.3 * Math.random();
            // Add color
            colors[i * 3] = r;
            colors[i * 3 + 1] = g;
            colors[i * 3 + 2] = b;
            // Calculate size
            sizes[i] = 2 + 3 * Math.random();
        }
        // Set attributes
        nebulaGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        nebulaGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        nebulaGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));
        // Create nebula material
        const nebulaMaterial = new THREE.PointsMaterial({
            size: 1,
            vertexColors: true,
            transparent: true,
            opacity: 0.6,
            blending: THREE.AdditiveBlending,
        });
        // Create nebula
        const nebula = new THREE.Points(nebulaGeometry, nebulaMaterial);
        // Position nebula within sector
        const sectorSize = this.options.sectorSize;
        const x = sector.coordinates.x * sectorSize + sectorSize / 2;
        const y = sector.coordinates.y * sectorSize + sectorSize / 2;
        const z = sector.coordinates.z * sectorSize + sectorSize / 2;
        nebula.position.set(x, y, z);
        // Add nebula to scene
        this.scene.add(nebula);
        // Add nebula to sector objects
        sector.objects.push(nebula);
        // Map nebula to sector
        this.objectSectorMap.set(`object-${nebula.uuid}`, sector.id);
    }
    /**
     * Generate black hole sector content
     * @param sector - Sector to generate content for
     */
    generateBlackHoleSectorContent(sector) {
        // Create black hole
        const blackHoleGeometry = new THREE.SphereGeometry(10, 32, 32);
        const blackHoleMaterial = new THREE.MeshBasicMaterial({
            color: new THREE.Color(0x000000),
            transparent: true,
            opacity: 0.8,
        });
        const blackHole = new THREE.Mesh(blackHoleGeometry, blackHoleMaterial);
        // Position black hole within sector
        const sectorSize = this.options.sectorSize;
        const x = sector.coordinates.x * sectorSize + sectorSize / 2;
        const y = sector.coordinates.y * sectorSize + sectorSize / 2;
        const z = sector.coordinates.z * sectorSize + sectorSize / 2;
        blackHole.position.set(x, y, z);
        // Add black hole to scene
        this.scene.add(blackHole);
        // Add black hole to sector objects
        sector.objects.push(blackHole);
        // Map black hole to sector
        this.objectSectorMap.set(`object-${blackHole.uuid}`, sector.id);
        // Create accretion disk
        const diskGeometry = new THREE.RingGeometry(15, 30, 64);
        const diskMaterial = new THREE.MeshBasicMaterial({
            color: new THREE.Color(0xff6600),
            side: THREE.DoubleSide,
            transparent: true,
            opacity: 0.6,
        });
        const disk = new THREE.Mesh(diskGeometry, diskMaterial);
        disk.rotation.x = Math.PI / 2;
        disk.position.copy(blackHole.position);
        // Add disk to scene
        this.scene.add(disk);
        // Add disk to sector objects
        sector.objects.push(disk);
        // Map disk to sector
        this.objectSectorMap.set(`object-${disk.uuid}`, sector.id);
    }
    /**
     * Generate quantum sector content
     * @param sector - Sector to generate content for
     */
    generateQuantumSectorContent(sector) {
        // Create quantum particles
        const particleCount = 500;
        for (let i = 0; i < particleCount; i++) {
            // Create particle
            const particleGeometry = new THREE.SphereGeometry(0.5, 8, 8);
            const particleMaterial = new THREE.MeshBasicMaterial({
                color: new THREE.Color(Math.random(), Math.random(), Math.random()),
                transparent: true,
                opacity: 0.8,
            });
            const particle = new THREE.Mesh(particleGeometry, particleMaterial);
            // Position particle within sector
            const sectorSize = this.options.sectorSize;
            const x = sector.coordinates.x * sectorSize + Math.random() * sectorSize;
            const y = sector.coordinates.y * sectorSize + Math.random() * sectorSize;
            const z = sector.coordinates.z * sectorSize + Math.random() * sectorSize;
            particle.position.set(x, y, z);
            // Add particle to scene
            this.scene.add(particle);
            // Add particle to sector objects
            sector.objects.push(particle);
            // Map particle to sector
            this.objectSectorMap.set(`object-${particle.uuid}`, sector.id);
        }
    }
    /**
     * Remove sector content
     * @param sector - Sector to remove content from
     */
    removeSectorContent(sector) {
        // Remove all objects in sector
        sector.objects.forEach((object) => {
            // Remove from scene
            this.scene.remove(object);
            // Remove from object sector map
            this.objectSectorMap.delete(`object-${object.uuid}`);
            // Dispose resources
            if (object instanceof THREE.Mesh) {
                if (object.geometry) {
                    object.geometry.dispose();
                }
                if (object.material) {
                    if (Array.isArray(object.material)) {
                        object.material.forEach((material) => material.dispose());
                    }
                    else {
                        object.material.dispose();
                    }
                }
            }
            else if (object instanceof THREE.Points) {
                if (object.geometry) {
                    object.geometry.dispose();
                }
                if (object.material) {
                    object.material.dispose();
                }
            }
        });
        // Clear sector objects
        sector.objects = [];
    }
    /**
     * Start sector transition
     * @param fromSector - From sector
     * @param toSector - To sector
     */
    startSectorTransition(fromSector, toSector) {
        // Skip if transitions are disabled
        if (!this.options.enableSectorTransitions) {
            return;
        }
        // Generate transition ID
        const transitionId = `transition-${fromSector.id}-${toSector.id}`;
        // Create transition
        const transition = {
            fromSector,
            toSector,
            startTime: performance.now(),
            duration: this.options.sectorTransitionDuration,
            progress: 0,
            isComplete: false,
        };
        // Store transition
        this.sectorTransitions.set(transitionId, transition);
        this.log(`Started sector transition: ${transitionId}`);
    }
    /**
     * Update sector transitions
     */
    updateSectorTransitions() {
        // Update each transition
        this.sectorTransitions.forEach((transition, transitionId) => {
            // Skip completed transitions
            if (transition.isComplete) {
                return;
            }
            // Calculate progress
            const elapsed = performance.now() - transition.startTime;
            transition.progress = Math.min(1.0, elapsed / transition.duration);
            // Apply transition effects
            this.applySectorTransitionEffects(transition);
            // Check if transition is complete
            if (transition.progress >= 1.0) {
                transition.isComplete = true;
                this.log(`Completed sector transition: ${transitionId}`);
            }
        });
        // Remove completed transitions
        this.sectorTransitions.forEach((transition, transitionId) => {
            if (transition.isComplete) {
                this.sectorTransitions.delete(transitionId);
            }
        });
    }
    /**
     * Apply sector transition effects
     * @param transition - Sector transition
     */
    applySectorTransitionEffects(transition) {
        // Apply transition effects based on sector types
        // This is a placeholder for actual transition effects
        // Example: Fade in/out objects
        const fadeInObjects = transition.toSector.objects;
        const fadeOutObjects = transition.fromSector.objects;
        // Fade in objects
        fadeInObjects.forEach((object) => {
            if (object instanceof THREE.Mesh) {
                if (object.material) {
                    if (Array.isArray(object.material)) {
                        object.material.forEach((material) => {
                            if (material.opacity !== undefined) {
                                material.opacity = transition.progress;
                            }
                        });
                    }
                    else {
                        if (object.material.opacity !== undefined) {
                            object.material.opacity = transition.progress;
                        }
                    }
                }
            }
            else if (object instanceof THREE.Points) {
                if (object.material && object.material.opacity !== undefined) {
                    object.material.opacity = transition.progress;
                }
            }
        });
        // Fade out objects
        fadeOutObjects.forEach((object) => {
            if (object instanceof THREE.Mesh) {
                if (object.material) {
                    if (Array.isArray(object.material)) {
                        object.material.forEach((material) => {
                            if (material.opacity !== undefined) {
                                material.opacity = 1 - transition.progress;
                            }
                        });
                    }
                    else {
                        if (object.material.opacity !== undefined) {
                            object.material.opacity = 1 - transition.progress;
                        }
                    }
                }
            }
            else if (object instanceof THREE.Points) {
                if (object.material && object.material.opacity !== undefined) {
                    object.material.opacity = 1 - transition.progress;
                }
            }
        });
    }
    /**
     * Update
     */
    update() {
        if (!this.isInitialized) {
            return;
        }
        // Update active sectors
        this.updateActiveSectors();
        // Update sector transitions
        this.updateSectorTransitions();
    }
    /**
     * Register object
     * @param object - Object to register
     */
    registerObject(object) {
        // Assign object to sector
        this.assignObjectToSector(object);
        // Update object visibility
        this.updateObjectVisibility();
    }
    /**
     * Unregister object
     * @param object - Object to unregister
     */
    unregisterObject(object) {
        // Generate object ID
        const objectId = `object-${object.uuid}`;
        // Check if object is registered
        if (!this.objectSectorMap.has(objectId)) {
            return;
        }
        // Get sector ID
        const sectorId = this.objectSectorMap.get(objectId);
        // Get sector
        if (this.sectors.has(sectorId)) {
            const sector = this.sectors.get(sectorId);
            // Remove object from sector
            sector.objects = sector.objects.filter((obj) => obj !== object);
        }
        // Remove object from map
        this.objectSectorMap.delete(objectId);
        // Update stats
        this.stats.totalObjects = this.objectSectorMap.size;
    }
    /**
     * Get current sector
     * @returns Current sector
     */
    getCurrentSector() {
        return this.currentSector;
    }
    /**
     * Get active sectors
     * @returns Active sectors
     */
    getActiveSectors() {
        return Array.from(this.activeSectors).map((sectorId) => this.sectors.get(sectorId));
    }
    /**
     * Get sector for position
     * @param position - Position
     * @returns Sector
     */
    getSectorForPosition(position) {
        // Get sector coordinates
        const sectorCoordinates = this.getSectorCoordinates(position);
        // Get sector ID
        const sectorId = this.getSectorId(sectorCoordinates);
        // Return sector if it exists
        if (this.sectors.has(sectorId)) {
            return this.sectors.get(sectorId);
        }
        return null;
    }
    /**
     * Get stats
     * @returns Stats
     */
    getStats() {
        return { ...this.stats };
    }
    /**
     * Set options
     * @param options - Options
     */
    setOptions(options) {
        this.options = {
            ...this.options,
            ...options,
        };
        // Update sector transitions
        if (options.enableSectorTransitions !== undefined ||
            options.sectorTransitionDuration !== undefined) {
            // Clear existing transitions
            this.sectorTransitions.clear();
        }
        // Update timers
        if (options.loadSectorDelay !== undefined ||
            options.unloadSectorDelay !== undefined) {
            this.startTimers();
        }
    }
    /**
     * Dispose
     */
    dispose() {
        // Stop timers
        this.stopTimers();
        // Remove sector helpers
        if (this.options.debugMode) {
            this.sectorHelpers.forEach((helper) => {
                this.scene.remove(helper);
            });
            this.sectorHelpers.clear();
        }
        // Unload all sectors
        this.sectors.forEach((sector) => {
            if (sector.isLoaded) {
                this.unloadSector(sector);
            }
        });
        // Clear sectors
        this.sectors.clear();
        this.activeSectors.clear();
        this.loadingSectors.clear();
        this.unloadingSectors.clear();
        this.objectSectorMap.clear();
        this.sectorTransitions.clear();
        // Mark as not initialized
        this.isInitialized = false;
        this.log('Universe Partitioner disposed');
    }
    /**
     * Log message if debug mode is enabled
     * @param message - Message to log
     */
    log(message) {
        if (this.options.debugMode) {
            console.log(`[UniversePartitioner] ${message}`);
        }
    }
}
