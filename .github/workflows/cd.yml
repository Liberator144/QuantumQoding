name: QQ-Verse CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Build backend
        run: |
          cd backend
          npm ci
          npm run build

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend-build

      - name: Download backend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend-build

      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying QQ-Verse to staging environment..."
          echo "Using Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
          # docker-compose -f docker-compose.staging.yml up -d
          # kubectl apply -f k8s/staging/

      - name: Verify Quantum Coherence in Staging
        run: |
          echo "üîç Verifying quantum coherence in staging environment..."
          # curl -f http://staging.qq-verse.com/health
          # curl -f http://staging.qq-verse.com/api/v1/quantum/coherence

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend-build

      - name: Download backend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend-build

      - name: Deploy to production environment
        run: |
          echo "üéÜ Deploying QQ-Verse to production environment..."
          echo "Using Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          # docker-compose -f docker-compose.prod.yml up -d
          # kubectl apply -f k8s/production/

      - name: Verify Quantum Coherence in Production
        run: |
          echo "‚úÖ Verifying quantum coherence in production environment..."
          # curl -f https://qq-verse.com/health
          # curl -f https://qq-verse.com/api/v1/quantum/coherence

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true