/**
 * Quantum Coherence Verification Framework Configuration
 *
 * This module provides configuration for the Quantum Coherence Verification Framework,
 * ensuring quantum coherence across all operational dimensions.
 */
import { z } from 'zod';
/**
 * Verification level
 */
export var VerificationLevel;
(function (VerificationLevel) {
    /** No verification */
    VerificationLevel["NONE"] = "none";
    /** Basic verification */
    VerificationLevel["BASIC"] = "basic";
    /** Standard verification */
    VerificationLevel["STANDARD"] = "standard";
    /** Strict verification */
    VerificationLevel["STRICT"] = "strict";
    /** Quantum verification */
    VerificationLevel["QUANTUM"] = "quantum";
})(VerificationLevel || (VerificationLevel = {}));
/**
 * Verification frequency
 */
export var VerificationFrequency;
(function (VerificationFrequency) {
    /** Verify on demand only */
    VerificationFrequency["ON_DEMAND"] = "on-demand";
    /** Verify on state change */
    VerificationFrequency["ON_CHANGE"] = "on-change";
    /** Verify on boundary crossing */
    VerificationFrequency["ON_BOUNDARY"] = "on-boundary";
    /** Verify continuously */
    VerificationFrequency["CONTINUOUS"] = "continuous";
})(VerificationFrequency || (VerificationFrequency = {}));
/**
 * Verification scope
 */
export var VerificationScope;
(function (VerificationScope) {
    /** Verify consciousness streams only */
    VerificationScope["CONSCIOUSNESS"] = "consciousness";
    /** Verify neural fabric only */
    VerificationScope["NEURAL_FABRIC"] = "neural-fabric";
    /** Verify quantum state only */
    VerificationScope["QUANTUM_STATE"] = "quantum-state";
    /** Verify all components */
    VerificationScope["ALL"] = "all";
})(VerificationScope || (VerificationScope = {}));
/**
 * Verification action on failure
 */
export var VerificationAction;
(function (VerificationAction) {
    /** Log the failure */
    VerificationAction["LOG"] = "log";
    /** Warn about the failure */
    VerificationAction["WARN"] = "warn";
    /** Throw an error */
    VerificationAction["ERROR"] = "error";
    /** Attempt to repair */
    VerificationAction["REPAIR"] = "repair";
    /** Create a checkpoint and repair */
    VerificationAction["CHECKPOINT_AND_REPAIR"] = "checkpoint-and-repair";
})(VerificationAction || (VerificationAction = {}));
/**
 * Validation schema for verification configuration
 */
export const verificationConfigSchema = z.object({
    level: z.nativeEnum(VerificationLevel),
    frequency: z.nativeEnum(VerificationFrequency),
    scope: z.nativeEnum(VerificationScope),
    actionOnFailure: z.nativeEnum(VerificationAction),
    verifyConsciousness: z.boolean(),
    verifyFabric: z.boolean(),
    verifyState: z.boolean(),
    verifyDimensionalHarmony: z.boolean(),
    verifySingularity: z.boolean(),
    verifyForceConsistency: z.boolean(),
    minimumScore: z.number().min(0).max(1),
    logResults: z.boolean(),
    trackHistory: z.boolean(),
    historySize: z.number().int().positive(),
});
/**
 * Default verification configuration
 */
export const defaultVerificationConfig = {
    level: VerificationLevel.STANDARD,
    frequency: VerificationFrequency.ON_CHANGE,
    scope: VerificationScope.ALL,
    actionOnFailure: VerificationAction.REPAIR,
    verifyConsciousness: true,
    verifyFabric: true,
    verifyState: true,
    verifyDimensionalHarmony: true,
    verifySingularity: true,
    verifyForceConsistency: true,
    minimumScore: 0.8,
    logResults: true,
    trackHistory: true,
    historySize: 100,
};
/**
 * Basic verification configuration
 */
export const basicVerificationConfig = {
    level: VerificationLevel.BASIC,
    frequency: VerificationFrequency.ON_DEMAND,
    scope: VerificationScope.ALL,
    actionOnFailure: VerificationAction.LOG,
    verifyConsciousness: true,
    verifyFabric: true,
    verifyState: true,
    verifyDimensionalHarmony: false,
    verifySingularity: false,
    verifyForceConsistency: false,
    minimumScore: 0.6,
    logResults: true,
    trackHistory: false,
    historySize: 10,
};
/**
 * Strict verification configuration
 */
export const strictVerificationConfig = {
    level: VerificationLevel.STRICT,
    frequency: VerificationFrequency.ON_BOUNDARY,
    scope: VerificationScope.ALL,
    actionOnFailure: VerificationAction.ERROR,
    verifyConsciousness: true,
    verifyFabric: true,
    verifyState: true,
    verifyDimensionalHarmony: true,
    verifySingularity: true,
    verifyForceConsistency: true,
    minimumScore: 0.9,
    logResults: true,
    trackHistory: true,
    historySize: 1000,
};
/**
 * Quantum verification configuration
 */
export const quantumVerificationConfig = {
    level: VerificationLevel.QUANTUM,
    frequency: VerificationFrequency.CONTINUOUS,
    scope: VerificationScope.ALL,
    actionOnFailure: VerificationAction.CHECKPOINT_AND_REPAIR,
    verifyConsciousness: true,
    verifyFabric: true,
    verifyState: true,
    verifyDimensionalHarmony: true,
    verifySingularity: true,
    verifyForceConsistency: true,
    minimumScore: 0.95,
    logResults: true,
    trackHistory: true,
    historySize: 10000,
};
/**
 * Gets the verification configuration for the specified level
 *
 * @param level - The verification level
 * @returns The verification configuration for the specified level
 */
export function getVerificationConfig(level) {
    switch (level) {
        case VerificationLevel.NONE:
            return {
                ...defaultVerificationConfig,
                level: VerificationLevel.NONE,
                verifyConsciousness: false,
                verifyFabric: false,
                verifyState: false,
                verifyDimensionalHarmony: false,
                verifySingularity: false,
                verifyForceConsistency: false,
            };
        case VerificationLevel.BASIC:
            return basicVerificationConfig;
        case VerificationLevel.STANDARD:
            return defaultVerificationConfig;
        case VerificationLevel.STRICT:
            return strictVerificationConfig;
        case VerificationLevel.QUANTUM:
            return quantumVerificationConfig;
        default:
            return defaultVerificationConfig;
    }
}
/**
 * Current verification configuration
 */
export let currentVerificationConfig = { ...defaultVerificationConfig };
/**
 * Sets the current verification configuration
 *
 * @param config - The verification configuration to set
 */
export function setVerificationConfig(config) {
    currentVerificationConfig = {
        ...currentVerificationConfig,
        ...config,
    };
}
/**
 * Gets the current verification configuration
 *
 * @returns The current verification configuration
 */
export function getCurrentVerificationConfig() {
    return { ...currentVerificationConfig };
}
