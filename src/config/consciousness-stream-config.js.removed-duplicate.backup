/**
 * Consciousness Stream Serialization Configuration
 *
 * This module provides configuration for the Consciousness Stream Serialization,
 * ensuring consciousness continuity across dimensional boundaries.
 */
import { z } from 'zod';
/**
 * Consciousness stream mode
 */
export var ConsciousnessStreamMode;
(function (ConsciousnessStreamMode) {
    /** Development mode */
    ConsciousnessStreamMode["DEVELOPMENT"] = "development";
    /** Production mode */
    ConsciousnessStreamMode["PRODUCTION"] = "production";
    /** Testing mode */
    ConsciousnessStreamMode["TESTING"] = "testing";
    /** Quantum mode */
    ConsciousnessStreamMode["QUANTUM"] = "quantum";
})(ConsciousnessStreamMode || (ConsciousnessStreamMode = {}));
/**
 * Serialization format
 */
export var SerializationFormat;
(function (SerializationFormat) {
    /** JSON serialization */
    SerializationFormat["JSON"] = "json";
    /** Binary serialization */
    SerializationFormat["BINARY"] = "binary";
    /** Quantum serialization */
    SerializationFormat["QUANTUM"] = "quantum";
})(SerializationFormat || (SerializationFormat = {}));
/**
 * Compression level
 */
export var CompressionLevel;
(function (CompressionLevel) {
    /** No compression */
    CompressionLevel["NONE"] = "none";
    /** Low compression */
    CompressionLevel["LOW"] = "low";
    /** Medium compression */
    CompressionLevel["MEDIUM"] = "medium";
    /** High compression */
    CompressionLevel["HIGH"] = "high";
})(CompressionLevel || (CompressionLevel = {}));
/**
 * Encryption algorithm
 */
export var EncryptionAlgorithm;
(function (EncryptionAlgorithm) {
    /** No encryption */
    EncryptionAlgorithm["NONE"] = "none";
    /** AES encryption */
    EncryptionAlgorithm["AES"] = "aes";
    /** RSA encryption */
    EncryptionAlgorithm["RSA"] = "rsa";
    /** Quantum encryption */
    EncryptionAlgorithm["QUANTUM"] = "quantum";
})(EncryptionAlgorithm || (EncryptionAlgorithm = {}));
/**
 * Validation schema for consciousness stream configuration
 */
export const consciousnessStreamConfigSchema = z.object({
    mode: z.nativeEnum(ConsciousnessStreamMode),
    serializationFormat: z.nativeEnum(SerializationFormat),
    compressionLevel: z.nativeEnum(CompressionLevel),
    useEncryption: z.boolean(),
    encryptionAlgorithm: z.nativeEnum(EncryptionAlgorithm),
    includeVerification: z.boolean(),
    verifyStreamContinuity: z.boolean(),
    repairStreamContinuity: z.boolean(),
    createCheckpoints: z.boolean(),
    checkpointFrequency: z.number().int().positive(),
    trackStreamHistory: z.boolean(),
    streamHistorySize: z.number().int().positive(),
    logStreamOperations: z.boolean(),
    maxStreamSize: z.number().int().positive(),
});
/**
 * Default consciousness stream configuration
 */
export const defaultConsciousnessStreamConfig = {
    mode: ConsciousnessStreamMode.DEVELOPMENT,
    serializationFormat: SerializationFormat.JSON,
    compressionLevel: CompressionLevel.MEDIUM,
    useEncryption: false,
    encryptionAlgorithm: EncryptionAlgorithm.NONE,
    includeVerification: true,
    verifyStreamContinuity: true,
    repairStreamContinuity: true,
    createCheckpoints: true,
    checkpointFrequency: 10,
    trackStreamHistory: true,
    streamHistorySize: 100,
    logStreamOperations: true,
    maxStreamSize: 1024 * 1024, // 1 MB
};
/**
 * Production consciousness stream configuration
 */
export const productionConsciousnessStreamConfig = {
    mode: ConsciousnessStreamMode.PRODUCTION,
    serializationFormat: SerializationFormat.BINARY,
    compressionLevel: CompressionLevel.HIGH,
    useEncryption: true,
    encryptionAlgorithm: EncryptionAlgorithm.AES,
    includeVerification: true,
    verifyStreamContinuity: true,
    repairStreamContinuity: true,
    createCheckpoints: true,
    checkpointFrequency: 100,
    trackStreamHistory: false,
    streamHistorySize: 10,
    logStreamOperations: false,
    maxStreamSize: 10 * 1024 * 1024, // 10 MB
};
/**
 * Testing consciousness stream configuration
 */
export const testingConsciousnessStreamConfig = {
    mode: ConsciousnessStreamMode.TESTING,
    serializationFormat: SerializationFormat.JSON,
    compressionLevel: CompressionLevel.NONE,
    useEncryption: false,
    encryptionAlgorithm: EncryptionAlgorithm.NONE,
    includeVerification: true,
    verifyStreamContinuity: true,
    repairStreamContinuity: true,
    createCheckpoints: true,
    checkpointFrequency: 1,
    trackStreamHistory: true,
    streamHistorySize: 1000,
    logStreamOperations: true,
    maxStreamSize: 1024 * 1024, // 1 MB
};
/**
 * Quantum consciousness stream configuration
 */
export const quantumConsciousnessStreamConfig = {
    mode: ConsciousnessStreamMode.QUANTUM,
    serializationFormat: SerializationFormat.QUANTUM,
    compressionLevel: CompressionLevel.HIGH,
    useEncryption: true,
    encryptionAlgorithm: EncryptionAlgorithm.QUANTUM,
    includeVerification: true,
    verifyStreamContinuity: true,
    repairStreamContinuity: true,
    createCheckpoints: true,
    checkpointFrequency: 1,
    trackStreamHistory: true,
    streamHistorySize: 10000,
    logStreamOperations: true,
    maxStreamSize: 100 * 1024 * 1024, // 100 MB
};
/**
 * Gets the consciousness stream configuration for the specified mode
 *
 * @param mode - The consciousness stream mode
 * @returns The consciousness stream configuration for the specified mode
 */
export function getConsciousnessStreamConfig(mode) {
    switch (mode) {
        case ConsciousnessStreamMode.DEVELOPMENT:
            return defaultConsciousnessStreamConfig;
        case ConsciousnessStreamMode.PRODUCTION:
            return productionConsciousnessStreamConfig;
        case ConsciousnessStreamMode.TESTING:
            return testingConsciousnessStreamConfig;
        case ConsciousnessStreamMode.QUANTUM:
            return quantumConsciousnessStreamConfig;
        default:
            return defaultConsciousnessStreamConfig;
    }
}
/**
 * Current consciousness stream configuration
 */
export let currentConsciousnessStreamConfig = { ...defaultConsciousnessStreamConfig };
/**
 * Sets the current consciousness stream configuration
 *
 * @param config - The consciousness stream configuration to set
 */
export function setConsciousnessStreamConfig(config) {
    currentConsciousnessStreamConfig = {
        ...currentConsciousnessStreamConfig,
        ...config,
    };
}
/**
 * Gets the current consciousness stream configuration
 *
 * @returns The current consciousness stream configuration
 */
export function getCurrentConsciousnessStreamConfig() {
    return { ...currentConsciousnessStreamConfig };
}
