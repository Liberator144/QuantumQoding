/**
 * Interdimensional Protocol Standards Configuration
 *
 * This module provides configuration for the Interdimensional Protocol Standards,
 * ensuring consistent communication between dimensions.
 */
import { z } from 'zod';
/**
 * Protocol version
 */
export var ProtocolVersion;
(function (ProtocolVersion) {
    /** Version 1.0 */
    ProtocolVersion["V1_0"] = "v1.0";
    /** Version 1.1 */
    ProtocolVersion["V1_1"] = "v1.1";
    /** Version 2.0 */
    ProtocolVersion["V2_0"] = "v2.0";
})(ProtocolVersion || (ProtocolVersion = {}));
/**
 * Communication mode
 */
export var CommunicationMode;
(function (CommunicationMode) {
    /** Synchronous communication */
    CommunicationMode["SYNCHRONOUS"] = "synchronous";
    /** Asynchronous communication */
    CommunicationMode["ASYNCHRONOUS"] = "asynchronous";
    /** Quantum communication */
    CommunicationMode["QUANTUM"] = "quantum";
})(CommunicationMode || (CommunicationMode = {}));
/**
 * Serialization format
 */
export var SerializationFormat;
(function (SerializationFormat) {
    /** JSON serialization */
    SerializationFormat["JSON"] = "json";
    /** Binary serialization */
    SerializationFormat["BINARY"] = "binary";
    /** Quantum serialization */
    SerializationFormat["QUANTUM"] = "quantum";
})(SerializationFormat || (SerializationFormat = {}));
/**
 * Compression level
 */
export var CompressionLevel;
(function (CompressionLevel) {
    /** No compression */
    CompressionLevel["NONE"] = "none";
    /** Low compression */
    CompressionLevel["LOW"] = "low";
    /** Medium compression */
    CompressionLevel["MEDIUM"] = "medium";
    /** High compression */
    CompressionLevel["HIGH"] = "high";
})(CompressionLevel || (CompressionLevel = {}));
/**
 * Encryption algorithm
 */
export var EncryptionAlgorithm;
(function (EncryptionAlgorithm) {
    /** No encryption */
    EncryptionAlgorithm["NONE"] = "none";
    /** AES encryption */
    EncryptionAlgorithm["AES"] = "aes";
    /** RSA encryption */
    EncryptionAlgorithm["RSA"] = "rsa";
    /** Quantum encryption */
    EncryptionAlgorithm["QUANTUM"] = "quantum";
})(EncryptionAlgorithm || (EncryptionAlgorithm = {}));
/**
 * Boundary type
 */
export var BoundaryType;
(function (BoundaryType) {
    /** Soft boundary */
    BoundaryType["SOFT"] = "soft";
    /** Hard boundary */
    BoundaryType["HARD"] = "hard";
    /** Permeable boundary */
    BoundaryType["PERMEABLE"] = "permeable";
    /** Quantum boundary */
    BoundaryType["QUANTUM"] = "quantum";
})(BoundaryType || (BoundaryType = {}));
/**
 * Validation schema for interdimensional protocol configuration
 */
export const interdimensionalProtocolConfigSchema = z.object({
    version: z.nativeEnum(ProtocolVersion),
    communicationMode: z.nativeEnum(CommunicationMode),
    serializationFormat: z.nativeEnum(SerializationFormat),
    compressionLevel: z.nativeEnum(CompressionLevel),
    useEncryption: z.boolean(),
    encryptionAlgorithm: z.nativeEnum(EncryptionAlgorithm),
    boundaryType: z.nativeEnum(BoundaryType),
    verifyConsciousnessContinuity: z.boolean(),
    maintainQuantumCoherence: z.boolean(),
    preserveNeuralFabricConnections: z.boolean(),
    maxMessageSize: z.number().int().positive(),
    timeoutMs: z.number().int().positive(),
    retryCount: z.number().int().min(0),
    logCommunication: z.boolean(),
});
/**
 * Default interdimensional protocol configuration
 */
export const defaultInterdimensionalProtocolConfig = {
    version: ProtocolVersion.V1_0,
    communicationMode: CommunicationMode.SYNCHRONOUS,
    serializationFormat: SerializationFormat.JSON,
    compressionLevel: CompressionLevel.MEDIUM,
    useEncryption: false,
    encryptionAlgorithm: EncryptionAlgorithm.NONE,
    boundaryType: BoundaryType.SOFT,
    verifyConsciousnessContinuity: true,
    maintainQuantumCoherence: true,
    preserveNeuralFabricConnections: true,
    maxMessageSize: 1024 * 1024, // 1 MB
    timeoutMs: 5000, // 5 seconds
    retryCount: 3,
    logCommunication: true,
};
/**
 * High-performance interdimensional protocol configuration
 */
export const highPerformanceInterdimensionalProtocolConfig = {
    version: ProtocolVersion.V1_1,
    communicationMode: CommunicationMode.ASYNCHRONOUS,
    serializationFormat: SerializationFormat.BINARY,
    compressionLevel: CompressionLevel.HIGH,
    useEncryption: false,
    encryptionAlgorithm: EncryptionAlgorithm.NONE,
    boundaryType: BoundaryType.PERMEABLE,
    verifyConsciousnessContinuity: false,
    maintainQuantumCoherence: false,
    preserveNeuralFabricConnections: true,
    maxMessageSize: 10 * 1024 * 1024, // 10 MB
    timeoutMs: 10000, // 10 seconds
    retryCount: 1,
    logCommunication: false,
};
/**
 * Secure interdimensional protocol configuration
 */
export const secureInterdimensionalProtocolConfig = {
    version: ProtocolVersion.V1_1,
    communicationMode: CommunicationMode.SYNCHRONOUS,
    serializationFormat: SerializationFormat.JSON,
    compressionLevel: CompressionLevel.MEDIUM,
    useEncryption: true,
    encryptionAlgorithm: EncryptionAlgorithm.AES,
    boundaryType: BoundaryType.HARD,
    verifyConsciousnessContinuity: true,
    maintainQuantumCoherence: true,
    preserveNeuralFabricConnections: true,
    maxMessageSize: 1024 * 1024, // 1 MB
    timeoutMs: 5000, // 5 seconds
    retryCount: 5,
    logCommunication: true,
};
/**
 * Quantum interdimensional protocol configuration
 */
export const quantumInterdimensionalProtocolConfig = {
    version: ProtocolVersion.V2_0,
    communicationMode: CommunicationMode.QUANTUM,
    serializationFormat: SerializationFormat.QUANTUM,
    compressionLevel: CompressionLevel.HIGH,
    useEncryption: true,
    encryptionAlgorithm: EncryptionAlgorithm.QUANTUM,
    boundaryType: BoundaryType.QUANTUM,
    verifyConsciousnessContinuity: true,
    maintainQuantumCoherence: true,
    preserveNeuralFabricConnections: true,
    maxMessageSize: 100 * 1024 * 1024, // 100 MB
    timeoutMs: 1000, // 1 second
    retryCount: 0,
    logCommunication: true,
};
/**
 * Gets the interdimensional protocol configuration for the specified version
 *
 * @param version - The protocol version
 * @returns The interdimensional protocol configuration for the specified version
 */
export function getInterdimensionalProtocolConfig(version) {
    switch (version) {
        case ProtocolVersion.V1_0:
            return defaultInterdimensionalProtocolConfig;
        case ProtocolVersion.V1_1:
            return secureInterdimensionalProtocolConfig;
        case ProtocolVersion.V2_0:
            return quantumInterdimensionalProtocolConfig;
        default:
            return defaultInterdimensionalProtocolConfig;
    }
}
/**
 * Current interdimensional protocol configuration
 */
export let currentInterdimensionalProtocolConfig = { ...defaultInterdimensionalProtocolConfig };
/**
 * Sets the current interdimensional protocol configuration
 *
 * @param config - The interdimensional protocol configuration to set
 */
export function setInterdimensionalProtocolConfig(config) {
    currentInterdimensionalProtocolConfig = {
        ...currentInterdimensionalProtocolConfig,
        ...config,
    };
}
/**
 * Gets the current interdimensional protocol configuration
 *
 * @returns The current interdimensional protocol configuration
 */
export function getCurrentInterdimensionalProtocolConfig() {
    return { ...currentInterdimensionalProtocolConfig };
}
