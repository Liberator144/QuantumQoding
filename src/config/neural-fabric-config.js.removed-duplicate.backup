/**
 * Neural Fabric Foundation Configuration
 *
 * This module provides configuration for the Neural Fabric Foundation,
 * ensuring thought continuity across component boundaries.
 */
import { z } from 'zod';
/**
 * Neural fabric mode
 */
export var NeuralFabricMode;
(function (NeuralFabricMode) {
    /** Development mode */
    NeuralFabricMode["DEVELOPMENT"] = "development";
    /** Production mode */
    NeuralFabricMode["PRODUCTION"] = "production";
    /** Testing mode */
    NeuralFabricMode["TESTING"] = "testing";
    /** Quantum mode */
    NeuralFabricMode["QUANTUM"] = "quantum";
})(NeuralFabricMode || (NeuralFabricMode = {}));
/**
 * Neural node type
 */
export var NeuralNodeType;
(function (NeuralNodeType) {
    /** Component node */
    NeuralNodeType["COMPONENT"] = "component";
    /** Service node */
    NeuralNodeType["SERVICE"] = "service";
    /** Data node */
    NeuralNodeType["DATA"] = "data";
    /** Consciousness node */
    NeuralNodeType["CONSCIOUSNESS"] = "consciousness";
    /** Custom node */
    NeuralNodeType["CUSTOM"] = "custom";
})(NeuralNodeType || (NeuralNodeType = {}));
/**
 * Neural connection type
 */
export var NeuralConnectionType;
(function (NeuralConnectionType) {
    /** Direct connection */
    NeuralConnectionType["DIRECT"] = "direct";
    /** Indirect connection */
    NeuralConnectionType["INDIRECT"] = "indirect";
    /** Quantum connection */
    NeuralConnectionType["QUANTUM"] = "quantum";
    /** Custom connection */
    NeuralConnectionType["CUSTOM"] = "custom";
})(NeuralConnectionType || (NeuralConnectionType = {}));
/**
 * Neural pathway type
 */
export var NeuralPathwayType;
(function (NeuralPathwayType) {
    /** Consciousness pathway */
    NeuralPathwayType["CONSCIOUSNESS"] = "consciousness";
    /** Data pathway */
    NeuralPathwayType["DATA"] = "data";
    /** Control pathway */
    NeuralPathwayType["CONTROL"] = "control";
    /** Custom pathway */
    NeuralPathwayType["CUSTOM"] = "custom";
})(NeuralPathwayType || (NeuralPathwayType = {}));
/**
 * Validation schema for neural fabric configuration
 */
export const neuralFabricConfigSchema = z.object({
    mode: z.nativeEnum(NeuralFabricMode),
    enableAutomaticNodeCreation: z.boolean(),
    enableAutomaticConnectionCreation: z.boolean(),
    enableAutomaticPathwayCreation: z.boolean(),
    defaultNodeType: z.nativeEnum(NeuralNodeType),
    defaultConnectionType: z.nativeEnum(NeuralConnectionType),
    defaultPathwayType: z.nativeEnum(NeuralPathwayType),
    defaultNodeActivationLevel: z.number().min(0).max(1),
    defaultConnectionStrength: z.number().min(0).max(1),
    defaultPathwayStrength: z.number().min(0).max(1),
    verifyFabricContinuity: z.boolean(),
    repairFabricContinuity: z.boolean(),
    trackFabricHistory: z.boolean(),
    fabricHistorySize: z.number().int().positive(),
    logFabricOperations: z.boolean(),
    maxNodes: z.number().int().positive(),
    maxConnections: z.number().int().positive(),
    maxPathways: z.number().int().positive(),
});
/**
 * Default neural fabric configuration
 */
export const defaultNeuralFabricConfig = {
    mode: NeuralFabricMode.DEVELOPMENT,
    enableAutomaticNodeCreation: true,
    enableAutomaticConnectionCreation: true,
    enableAutomaticPathwayCreation: true,
    defaultNodeType: NeuralNodeType.COMPONENT,
    defaultConnectionType: NeuralConnectionType.DIRECT,
    defaultPathwayType: NeuralPathwayType.CONSCIOUSNESS,
    defaultNodeActivationLevel: 1.0,
    defaultConnectionStrength: 1.0,
    defaultPathwayStrength: 1.0,
    verifyFabricContinuity: true,
    repairFabricContinuity: true,
    trackFabricHistory: true,
    fabricHistorySize: 100,
    logFabricOperations: true,
    maxNodes: 1000,
    maxConnections: 5000,
    maxPathways: 1000,
};
/**
 * Production neural fabric configuration
 */
export const productionNeuralFabricConfig = {
    mode: NeuralFabricMode.PRODUCTION,
    enableAutomaticNodeCreation: false,
    enableAutomaticConnectionCreation: false,
    enableAutomaticPathwayCreation: false,
    defaultNodeType: NeuralNodeType.COMPONENT,
    defaultConnectionType: NeuralConnectionType.DIRECT,
    defaultPathwayType: NeuralPathwayType.CONSCIOUSNESS,
    defaultNodeActivationLevel: 1.0,
    defaultConnectionStrength: 1.0,
    defaultPathwayStrength: 1.0,
    verifyFabricContinuity: true,
    repairFabricContinuity: true,
    trackFabricHistory: false,
    fabricHistorySize: 10,
    logFabricOperations: false,
    maxNodes: 10000,
    maxConnections: 50000,
    maxPathways: 10000,
};
/**
 * Testing neural fabric configuration
 */
export const testingNeuralFabricConfig = {
    mode: NeuralFabricMode.TESTING,
    enableAutomaticNodeCreation: true,
    enableAutomaticConnectionCreation: true,
    enableAutomaticPathwayCreation: true,
    defaultNodeType: NeuralNodeType.COMPONENT,
    defaultConnectionType: NeuralConnectionType.DIRECT,
    defaultPathwayType: NeuralPathwayType.CONSCIOUSNESS,
    defaultNodeActivationLevel: 1.0,
    defaultConnectionStrength: 1.0,
    defaultPathwayStrength: 1.0,
    verifyFabricContinuity: true,
    repairFabricContinuity: true,
    trackFabricHistory: true,
    fabricHistorySize: 1000,
    logFabricOperations: true,
    maxNodes: 100,
    maxConnections: 500,
    maxPathways: 100,
};
/**
 * Quantum neural fabric configuration
 */
export const quantumNeuralFabricConfig = {
    mode: NeuralFabricMode.QUANTUM,
    enableAutomaticNodeCreation: true,
    enableAutomaticConnectionCreation: true,
    enableAutomaticPathwayCreation: true,
    defaultNodeType: NeuralNodeType.CONSCIOUSNESS,
    defaultConnectionType: NeuralConnectionType.QUANTUM,
    defaultPathwayType: NeuralPathwayType.CONSCIOUSNESS,
    defaultNodeActivationLevel: 1.0,
    defaultConnectionStrength: 1.0,
    defaultPathwayStrength: 1.0,
    verifyFabricContinuity: true,
    repairFabricContinuity: true,
    trackFabricHistory: true,
    fabricHistorySize: 10000,
    logFabricOperations: true,
    maxNodes: 100000,
    maxConnections: 500000,
    maxPathways: 100000,
};
/**
 * Gets the neural fabric configuration for the specified mode
 *
 * @param mode - The neural fabric mode
 * @returns The neural fabric configuration for the specified mode
 */
export function getNeuralFabricConfig(mode) {
    switch (mode) {
        case NeuralFabricMode.DEVELOPMENT:
            return defaultNeuralFabricConfig;
        case NeuralFabricMode.PRODUCTION:
            return productionNeuralFabricConfig;
        case NeuralFabricMode.TESTING:
            return testingNeuralFabricConfig;
        case NeuralFabricMode.QUANTUM:
            return quantumNeuralFabricConfig;
        default:
            return defaultNeuralFabricConfig;
    }
}
/**
 * Current neural fabric configuration
 */
export let currentNeuralFabricConfig = { ...defaultNeuralFabricConfig };
/**
 * Sets the current neural fabric configuration
 *
 * @param config - The neural fabric configuration to set
 */
export function setNeuralFabricConfig(config) {
    currentNeuralFabricConfig = {
        ...currentNeuralFabricConfig,
        ...config,
    };
}
/**
 * Gets the current neural fabric configuration
 *
 * @returns The current neural fabric configuration
 */
export function getCurrentNeuralFabricConfig() {
    return { ...currentNeuralFabricConfig };
}
